#!/usr/bin/env crm
{
    isolate (:es:) /\/Users\/ldbeth\/.emacs.d\/mail\/emacs-devel\//
    isolate (:application:) /(MS|QQ|BQ|OQ|Microsoft|YMail|Google|Crm)/
    {
        match (:: :current_headers:) /(([^\n]+\n)+)\n/
        # remove application headers
        {
            match <fromend> (:app_header:) \
 /\nX-:*:application:-[[:graph:]]+: ([[:graph:] ]*)(\n\s+([[:graph:] ]*))*/ \
 [:current_headers:]
            alter (:app_header:) //
            liaf
        }
        {
            match /emacs-devel.gnu.org/ [:current_headers:]
            # It's emacs!
            match (:: :body:) /\n\n(.*)/
            call /:normalize:/ (:norm:) [:*:body:]
            isolate (:new_header:)
            {
                {
                    isolate (:stats:)
                    classify <osb unique microgroom> [:norm:] \
                            (:*:es:news.css :*:es:help.css :*:es:boring.css) (:stats:)
                    match [:stats:] <nomultiline> \
                            /^Best match to file #[0-9]+ \((.+)\).* pR: ([-. 0-9]+)/ (:x: :file: :prob:)
                    eval /:@: :*:prob: > 0 :/
                    match [:file:] /\/([[:alnum:]]+)\.css$/ (:: :tag:)
                    alter (:new_header:) /X-Crm-Result: tag: :*:tag: pR: :*:prob:/
                }
                alius
                {
                    alter (:new_header:) /X-Crm-Result: FAILED/
                }
            }
            alter (:current_headers:) /:*:current_headers::*:new_header:\n/
        }
    }
    accept
}
fail /BEGIN LIBRARY!/
:normalize: (:text:)
{
    {
        # remove quotes
        match <nomultiline> (:quote:) \
                /^[[:space:]]*[[:graph:]]*>+[ \t]*[^\n]+$/ [:text:]
        alter (:quote:) //
        liaf
    }
return /:*:text:/
}
