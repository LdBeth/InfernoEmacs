# Do not edit this file. Auto generated from commands.xml with sphelper.

namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace local = ""
namespace ns1 = "urn:speedata:2009/publisher/functions/en"
default namespace ns2 = "urn:speedata.de:2009/publisher/en"
namespace sch = "http://purl.oclc.org/dsdl/schematron"

sch:ns [ prefix = "t" uri = "urn:speedata.de:2009/publisher/en" ]
start = e_Layout | e_Include
e_A =
  
  ## Insert hyperlink to a URL.
  element A {
    (
     ## The target of the hyperlink (URI). Example: https://www.speedata.de
     attribute href { text }?,
     
     ## The target of the document link (a Mark). Example: article123
     attribute link { text }?,
     
     ## Link to a (logical) page number.
     attribute page { text }?,
     ((e_A
       | e_Action
       | e_B
       | e_Barcode
       | e_Br
       | e_Clip
       | e_Color
       | e_Fontface
       | e_ForAll
       | e_Frame
       | e_HSpace
       | e_I
       | e_Image
       | e_Loop
       | e_NoBreak
       | e_Sub
       | e_Sup
       | e_Span
       | e_Switch
       | e_U
       | e_URL
       | e_Value)*
      & e_Box?)+)
    & foreign-nodes
  }
e_Action =
  
  ## Associates an action with a text. Once the text is placed on the page, the associated action will be executed. The action can be compared to an invisible character. When the publisher outputs the character, the corresponding instructions will be run.
  element Action { e_Mark+ & foreign-nodes }
e_AddSearchpath =
  
  ## Add a directory on the hard-drive to be added to the publisher's search path.
  element AddSearchpath {
    
    ## The path to be added. System dependent.
    attribute select { text },
    empty
  }
e_AtPageCreation =
  
  ## The contents of the element AtPageCreation is executed the first time the page is accessed. This is used in Pagetype.
  element AtPageCreation {
    (
     ## The name of a metapost graphic.
     attribute graphic { text }?,
     (e_AddSearchpath?,
      e_AttachFile?,
      e_Bookmark?,
      e_ClearPage?,
      e_Copy-of?,
      e_DefineColor?,
      e_DefineFontfamily?,
      e_DefineFontalias?,
      e_DefineMatter?,
      e_DefineTextformat?,
      e_ForAll?,
      e_Group?,
      e_Hyphenation?,
      e_Include?,
      e_InsertPages?,
      e_Layout?,
      e_LoadDataset?,
      e_Loop?,
      e_Message?,
      e_NewPage?,
      e_NextFrame?,
      e_NextRow?,
      e_Options?,
      e_Output?,
      e_Pagetype?,
      e_Pageformat?,
      e_PDFOptions?,
      e_PlaceObject?,
      e_ProcessNode?,
      e_SaveDataset?,
      e_SavePages?,
      e_SetGrid?,
      e_SetVariable?,
      e_SortSequence?,
      e_Switch?,
      e_Until?,
      e_While?)+)
    & foreign-nodes
  }
e_AtPageShipout =
  
  ## The enclosed instructions will be executed when the page is placed into the PDF file. Used in Pagetype.
  element AtPageShipout {
    (
     ## The name of a metapost graphic.
     attribute graphic { text }?,
     (e_AddSearchpath?,
      e_AttachFile?,
      e_Bookmark?,
      e_ClearPage?,
      e_Copy-of?,
      e_DefineColor?,
      e_DefineFontfamily?,
      e_DefineFontalias?,
      e_DefineMatter?,
      e_DefineTextformat?,
      e_ForAll?,
      e_Group?,
      e_Hyphenation?,
      e_Include?,
      e_InsertPages?,
      e_Layout?,
      e_LoadDataset?,
      e_Loop?,
      e_Message?,
      e_NewPage?,
      e_NextFrame?,
      e_NextRow?,
      e_Options?,
      e_Output?,
      e_Pagetype?,
      e_Pageformat?,
      e_PDFOptions?,
      e_PlaceObject?,
      e_ProcessNode?,
      e_SaveDataset?,
      e_SavePages?,
      e_SetGrid?,
      e_SetVariable?,
      e_SortSequence?,
      e_Switch?,
      e_Until?,
      e_While?)+)
    & foreign-nodes
  }
e_AttachFile =
  
  ## Attach a file to the PDF. Can be used to attach a ZUGFeRD electronic invoice.
  element AttachFile {
    
    ## The name of the local file to be attached to the PDF.
    attribute filename { text }?,
    
    ## Textual description of the attached file (for the PDF viewer).
    attribute description { text }?,
    
    ## The type of the included file. Must be a mime type or ZUGFeRD invoice.
    attribute type { text },
    
    ## Set the name of the attached file in the PDF document. Defaults to ZUGFeRD-invoice.xml if the attached file type is ZUGFeRD invoice.
    attribute name { text }?,
    
    ## The contents of the file. Alternative to reading a file from the hard-drive.
    attribute select { text }?,
    empty
  }
e_Attribute =
  
  ## Create an attribute for the Element data structure that can be saved to the hard drive with SaveDataset.
  element Attribute {
    
    ## Name of the attribute that is created.
    attribute name { text },
    
    ## The contents of the attribute
    attribute select { text },
    empty
  }
e_B =
  
  ## Switch to font weight »bold«
  element B {
    (e_A
     | e_Action
     | e_B
     | e_Barcode
     | e_Br
     | e_Clip
     | e_Color
     | e_Fontface
     | e_ForAll
     | e_Frame
     | e_HSpace
     | e_I
     | e_Image
     | e_Loop
     | e_NoBreak
     | e_Sub
     | e_Sup
     | e_Span
     | e_Switch
     | e_U
     | e_URL
     | e_Value)*
    & foreign-nodes
  }
e_Barcode =
  
  ## Print a 1d or 2d barcode. To be used in PlaceObject.
  element Barcode {
    
    ## Color of the barcode. Must be defined with DefineColor before use. Currently only used for QR codes.
    attribute color { text }?,
    
    ## Set the error correction level for QR-codes. If not provided, the system uses the maximum level for minimum size. The higher the level, the more error correction is in the QR-code.
    attribute eclevel {
      
      ## Set the lowest level (1) with approx. 7% recovery.
      "L"
      | 
        ## Set the second lowest level (2) with approx. 15% recovery.
        "M"
      | 
        ## Set the second highest level (3) with approx. 25% recovery.
        "Q"
      | 
        ## Set the highest level (4) with approx. 35% recovery.
        "H"
    }?,
    
    ## Name of the font of the text that can be placed beneath the barcode. Not used in all codes.
    attribute fontfamily { text }?,
    
    ## Height of the barcode.
    attribute height { text }?,
    
    ## Try to keep the size of the requested font. Works with EAN13 only.
    attribute keepfontsize { "yes" | "no" }?,
    
    ## The factor denoting the extra length of the outer and middle bar. Only useful with EAN13.
    attribute overshoot { text }?,
    
    ## The data to be encoded in the barcode.
    attribute select { text },
    
    ## Should the text be written under the barcode?
    attribute showtext {
      
      ## Write text beneath the barcode.
      "yes"
      | 
        ## Don't display text.
        "no"
    }?,
    
    ## Type of the barcode. One of EAN13, Code128 or QRCode.
    attribute type {
      
      ## Create an »optimal« QR code in terms of error correction and size.
      "QRCode"
      | 
        ## Generate a code 128 barcode for numbers and text.
        "Code128"
      | 
        ## Create an EAN13 barcode for 13 digits.
        "EAN13"
    },
    
    ## Width of the barcode
    attribute width { text }?,
    empty
  }
e_Bold =
  
  ## Name of the font face that should be used when switching to »bold«.
  element Bold {
    
    ## Name of the font for bold.
    attribute fontface { text },
    empty
  }
e_BoldItalic =
  
  ## Name of the font face that should be used when switching to »bold italic«.
  element BoldItalic {
    
    ## Name of the font for bold italic.
    attribute fontface { text },
    empty
  }
e_Bookmark =
  
  ## Create a bookmark for the PDF viewer (e.g. Adobe Reader). When the user clicks on a bookmark, the PDF viewer jumps to that place in the document.
  element Bookmark {
    
    ## 1 is the top level, 2 is the next level, etc.
    attribute level { text },
    
    ## If yes, the child elements are shown. If no, the child elements are hidden.
    attribute open {
      
      ## Show children.
      "yes"
      | 
        ## Hide children.
        "no"
    }?,
    
    ## Title of the bookmark
    attribute select { text },
    empty
  }
e_Box =
  
  ## Create a rectangular colored area. The area must fit the grid cells.
  element Box {
    
    ## Color of the box. If the color name is a dash (-), a transparent background is used.
    attribute backgroundcolor { text }?,
    
    ## Lets the box increase its size by the amount of trim given in the options. Useful for thumb indexes. The contents of the attribute is either »left«, »right«, »top« or »bottom« or any combination such as »top,right«.
    attribute bleed {
      
      ## Increase the size to the top.
      "top"
      | 
        ## Increase the size to the left.
        "left"
      | 
        ## Increase the size to the bottom.
        "bottom"
      | 
        ## Increase the size to the right.
        "right"
      | 
        ## Increase the size to the top and left.
        "top,left"
      | 
        ## Increase the size to the top and right.
        "top,right"
      | 
        ## Increase the size to the bottom and left.
        "bottom,left"
      | 
        ## Increase the size to the bottom and right.
        "bottom,right"
    }?,
    
    ## CSS class for this box.
    attribute class { text }?,
    
    ## The name of the metapost graphic to use instead of the box.
    attribute graphic { text }?,
    
    ## Height of the box in grid cells.
    attribute height { text },
    
    ## CSS id for this box.
    attribute id { text }?,
    
    ## Set the inner distance (width between contents and the border) to the top edge.
    attribute padding-top { text }?,
    
    ## Set the inner distance (width between contents and the border) to the bottom edge.
    attribute padding-bottom { text }?,
    
    ## Set the inner distance (width between contents and the border) to the left edge.
    attribute padding-left { text }?,
    
    ## Set the inner distance (width between contents and the border) to the right edge.
    attribute padding-right { text }?,
    
    ## Width of the box in grid cells or in absolute values.
    attribute width { text },
    empty
  }
e_Br =
  
  ## Insert a newline
  element Br { empty }
e_Case =
  
  ## Part of a Switch construct. All cases up to the first case which evaluates to »true« will be executed. If no cases match and there is a Otherwise, this will be executed instead.
  element Case {
    (
     ## The test that gets evaluated.
     attribute test { text },
     (e_A?,
      e_Action?,
      e_AddSearchpath?,
      e_Attribute?,
      e_B?,
      e_Barcode?,
      e_Bookmark?,
      e_Box?,
      e_Br?,
      e_ClearPage?,
      e_Clip?,
      e_Color?,
      e_Column?,
      e_Columns?,
      e_Copy-of?,
      e_DefineColor?,
      e_DefineFontfamily?,
      e_DefineFontalias?,
      e_DefineTextformat?,
      e_DefineMatter?,
      e_Element?,
      e_Fontface?,
      e_ForAll?,
      e_Frame?,
      e_Group?,
      e_HSpace?,
      e_Hyphenation?,
      e_I?,
      e_Image?,
      e_Initial?,
      e_Include?,
      e_InsertPages?,
      e_Layout?,
      e_Li?,
      e_LoadDataset?,
      e_LoadFontfile?,
      e_Loop?,
      e_Message?,
      e_NewPage?,
      e_NextFrame?,
      e_NextRow?,
      e_NoBreak?,
      e_Options?,
      e_Output?,
      e_Pagetype?,
      e_Pageformat?,
      e_Paragraph?,
      e_PlaceObject?,
      e_PositioningArea?,
      e_PositioningFrame?,
      e_ProcessNode?,
      e_SaveDataset?,
      e_SavePages?,
      e_SetGrid?,
      e_SetVariable?,
      e_SortSequence?,
      e_Span?,
      e_Sub?,
      e_Sup?,
      e_Switch?,
      e_Table?,
      e_TableNewPage?,
      e_Tablehead?,
      e_Tablerule?,
      e_Td?,
      e_Tr?,
      e_Transformation?,
      e_Trace?,
      e_U?,
      e_Until?,
      e_Value?,
      e_VSpace?,
      e_While?)+)
    & foreign-nodes
  }
e_Circle =
  
  ## Create a circle or ellipse.
  element Circle {
    
    ## Color of the circle.
    attribute backgroundcolor { text }?,
    
    ## CSS class for the circle.
    attribute class { text }?,
    
    ## Color of the circle line.
    attribute framecolor { text }?,
    
    ## CSS id for this circle.
    attribute id { text }?,
    
    ## Radius of the circle in grid cells (horizontal) or as an absolute length. Use with radiusy to create an ellipse.
    attribute radiusx { text },
    
    ## Radius of the ellipse in grid cells (vertical) or as an absolute length.
    attribute radiusy { text }?,
    
    ## The thickness of the border that is drawn around the object.
    attribute rulewidth { text }?,
    empty
  }
e_ClearPage =
  
  ## Finishes the current page.
  element ClearPage {
    
    ## Force the creation of a new page when multiple consecutive ClearPage commands occur.
    attribute force { text }?,
    
    ## Set the matter for the new page.
    attribute matter { text }?,
    
    ## The next current page will be a left or a right page. E.g. when on page 1 and openon="right" then page 2 is empty and the next current page is 3.
    attribute openon {
      
      ## The next objects will be placed on a left page.
      "left"
      | 
        ## The next objects will be placed on a right page.
        "right"
    }?,
    
    ## The name of the next page type that should be used. If an InsertPage follows the NextPage, the pagetype is used for the first inserted page.
    attribute pagetype { text }?,
    
    ## The pagetype of the blank page if inserted (see the attribute openon).
    attribute skippagetype { text }?,
    empty
  }
e_Clip =
  
  ## Clip an image or other output
  element Clip {
    (
     ## The amount of clip from the left border.
     attribute left { text }?,
     
     ## The amount of clip from the top border.
     attribute top { text }?,
     
     ## The amount of clip from the right border.
     attribute right { text }?,
     
     ## The amount of clip from the bottom border.
     attribute bottom { text }?,
     
     ## The clipped width of the object. Should be used with one of left or right.
     attribute width { text }?,
     
     ## The clipped height of the object. Should be used with one of top or bottom.
     attribute height { text }?,
     
     ## Set the resize method of the resulting object.
     attribute method {
       
       ## Clip and shrink the object.
       "clip"
       | 
         ## Just hide the outer frame of the object, do not change the size.
         "frame"
       | xsd:string { pattern = "\{.+\}" }
     }?,
     (e_Image?
      & e_Box?
      & e_Circle?
      & e_Rule?
      & e_Textblock?
      & e_Barcode?
      & e_Table?
      & e_Transformation?
      & e_Frame?)+)
    & foreign-nodes
  }
e_Color =
  
  ## Switch to another text color
  element Color {
    (
     ## The name of the color. Must be pre-defined with DefineColor.
     attribute name { text },
     (e_A
      | e_Action
      | e_B
      | e_Barcode
      | e_Br
      | e_Clip
      | e_Color
      | e_Fontface
      | e_ForAll
      | e_Frame
      | e_HSpace
      | e_I
      | e_Image
      | e_Loop
      | e_NoBreak
      | e_Sub
      | e_Sup
      | e_Span
      | e_Switch
      | e_U
      | e_URL
      | e_Value)*)
    & foreign-nodes
  }
e_Column =
  
  ## Set the properties of a column in the table.
  element Column {
    
    ## The horizontal alignment of the table cells in this column. Can be overridden in a cell (Td).
    attribute align {
      
      ## The table cells are left aligned.
      "left"
      | 
        ## The table cells are horizontally centered.
        "center"
      | 
        ## The table cells are right aligned.
        "right"
    }?,
    
    ## All cells in this column have this background color.
    attribute backgroundcolor { text }?,
    
    ## Set the left padding for the column
    attribute padding-left { text }?,
    
    ## Set the right padding for the column
    attribute padding-right { text }?,
    
    ## Width of the column. Argument can be a number (in grid cells) a length (e.g. 2cm) or a *-number (e.g. 4*).
    attribute width { text }?,
    
    ## The vertical alignment of the cells in this column. Can be overridden in a cell (Td).
    attribute valign {
      
      ## The table cells are top aligned.
      "top"
      | 
        ## The table cells are vertically centered.
        "middle"
      | 
        ## The table cells are aligned at the bottom.
        "bottom"
    }?,
    empty
  }
e_Columns =
  
  ## Set the widths and other properties of the columns in a table.
  element Columns {
    (e_Column | e_Copy-of | e_ForAll | e_Loop | e_Switch)+
    & foreign-nodes
  }
e_Compatibility =
  
  ## Set compatibility for older layouts
  element Compatibility {
    
    ## Switch the behavior where objects at the right page margin used in PlaceObject puts the cursor in #columns + 1.
    attribute movecursoronplaceobject {
      
      ## New behavior (default): set cursor in column 1 when an object goes to the right margin.
      "yes"
      | 
        ## Old behavior: set the cursor to the column + 1 past the right edge of the placed object.
        "no"
    }?,
    empty
  }
e_Contents =
  
  ## Marks the contents of a Group, a virtual area.
  element Contents {
    (e_AddSearchpath?,
     e_AttachFile?,
     e_Bookmark?,
     e_ClearPage?,
     e_Copy-of?,
     e_DefineColor?,
     e_DefineFontfamily?,
     e_DefineFontalias?,
     e_DefineMatter?,
     e_DefineTextformat?,
     e_ForAll?,
     e_Group?,
     e_Hyphenation?,
     e_Include?,
     e_InsertPages?,
     e_Layout?,
     e_LoadDataset?,
     e_Loop?,
     e_Message?,
     e_NewPage?,
     e_NextFrame?,
     e_NextRow?,
     e_Options?,
     e_Output?,
     e_Pagetype?,
     e_Pageformat?,
     e_PDFOptions?,
     e_PlaceObject?,
     e_ProcessNode?,
     e_SaveDataset?,
     e_SavePages?,
     e_SetGrid?,
     e_SetVariable?,
     e_SortSequence?,
     e_Switch?,
     e_Until?,
     e_While?)+
    & foreign-nodes
  }
e_Copy-of =
  
  ## Replace this element by the copy of the selection as an element structure. You can use it to construct more complex data structures.
  element Copy-of {
    
    ## The selection (most likely a variable) that is to be copied.
    attribute select { text },
    empty
  }
e_DefineColorprofile =
  
  ## Associate an external color profile with a name. To be used in PDFOptions.
  element DefineColorprofile {
    
    ## Description of the output condition.
    attribute condition { text }?,
    
    ## Number of the colors in this color profile
    attribute colors { text },
    
    ## Filename of the color profile.
    attribute filename { text },
    
    ## The official identifier for the registry.
    attribute identifier { text },
    
    ## Short text about the color profile.
    attribute info { text },
    
    ## The internal name of the color profile. To be used in PDFOptions.
    attribute name { text },
    
    ## The name of the registry. Defaults to http://www.color.org/.
    attribute registry { text }?,
    empty
  }
e_DefineColor =
  
  ## Colors defined with DefineColors can be referenced later by their name.
  element DefineColor {
    
    ## Set the opacity of the color. (0-100/255, where 0 is invisible)
    attribute alpha { text }?,
    
    ## The name of the spot color if model is »spotcolor«. The name must match the required color name, such as »PANTONE 116 C«.
    attribute colorname { text }?,
    
    ## Color model to be used for the color. Currently “rgb”, “cmyk”, “gray” and “spotcolor” are supported.
    attribute model {
      
      ## CMYK (cyan, magenta, yellow, key/black), values between 0 and 100 (100 = full intensity)
      "cmyk"
      | 
        ## rgb (red, green, blue), values between 0 and 100, 100 means full intensity
        "rgb"
      | 
        ## rgb (red, green, blue), values between 0 and 255, 255 means full intensity
        "RGB"
      | 
        ## Gray (0=black, 100=white)
        "gray"
      | 
        ## Use a PANTONE or HKS color.
        "spotcolor"
    }?,
    
    ## The name of the color to be defined.
    attribute name { text },
    
    ## Enable overprint for this color.
    attribute overprint {
      
      ## Enable overprint for this color.
      "yes"
      | 
        ## Disable overprint for this color (default).
        "no"
    }?,
    
    ## Hex value of the color, such as #FA5 or #FFAA55 or rgb(255,170,85) or rgba(255,170,85,1).
    attribute value { text }?,
    
    ## Red part with rgb (0-100) or RGB (0-255).
    attribute r { text }?,
    
    ## Green part with rgb (0-100) or RGB (0-255) / gray part when using the model gray (0-100).
    attribute g { text }?,
    
    ## Blue part with rgb (0-100) or RGB (0-255).
    attribute b { text }?,
    
    ## Cyan part with cmyk (0-100).
    attribute c { text }?,
    
    ## Magenta part with cmyk (0-100)
    attribute m { text }?,
    
    ## Yellow part with cmyk (0-100).
    attribute y { text }?,
    
    ## Black part with cmyk (0-100).
    attribute k { text }?,
    empty
  }
e_DefineGraphic =
  
  ## Define a metapost graphic to be used in Box. EXPERIMENTAL!
  element DefineGraphic {
    (
     ## The name of the graphic.
     attribute name { text },
     text)
    & foreign-nodes
  }
e_DefineFontalias =
  
  ## Defines a font alias. When defining a font family, you can use the an alias for the fontname. Aliases are looked up recursively.
  element DefineFontalias {
    
    ## New (equivalent) name of the font
    attribute alias { text },
    
    ## The name of the existing font family.
    attribute existing { text },
    empty
  }
e_DefineFontfamily =
  
  ## Defines a font family consisting of the shapes “regular”, “bold”, “bold italic” and “italic”. To be used in Paragraph, Textblock, Fontface and Table with the attribute fontfamily.
  element DefineFontfamily {
    (
     ## Font size in pt (PostScript points). Number without unit.
     attribute fontsize { text },
     
     ## Distance between two baselines in pt (PostScript points). Without unit.
     attribute leading { text },
     
     ## The symbolic name that is used as a reference to access this font family.
     attribute name { text },
     (e_Regular? & e_Italic? & e_Bold? & e_BoldItalic?))
    & foreign-nodes
  }
e_DefineMatter =
  
  ## Define a new section of the document.
  element DefineMatter {
    
    ## The name of the section to be defined.
    attribute name { text },
    
    ## Set the prefix of the displayed page number.
    attribute prefix { text }?,
    
    ## Set label for the user-visible page number.
    attribute label {
      
      ## Set the page number to decimal arabic numerals.
      "decimal"
      | 
        ## Set the page numbering to lowercase romannumeral
        "lowercase-romannumeral"
      | 
        ## Set the page numbering to uppercase romannumeral
        "uppercase-romannumeral"
      | 
        ## Set the page numbering to lowercase letter (a-z)
        "lowercase-letter"
      | 
        ## Set the page numbering to uppercase letter (A-Z)
        "uppercase-letter"
    }?,
    
    ## Reset page numbering to 1 after this matter.
    attribute resetafter { "yes" | "no" }?,
    
    ## Set the page number to 1 at the section start.
    attribute resetbefore { "yes" | "no" }?,
    empty
  }
e_DefineTextformat =
  
  ## Define text formatting instructions. A textformat is used to align and indent text and create margins and rules before and after the text.
  element DefineTextformat {
    
    ## Determines the formatting of the text. It defaults to justified.
    attribute alignment {
      
      ## Textblock has a rectangular shape.
      "justified"
      | 
        ## The text is ragged at the right margin.
        "leftaligned"
      | 
        ## The text is ragged right at the left margin.
        "rightaligned"
      | 
        ## The text is ragged at the left and the right margin.
        "centered"
      | 
        ## The text is ragged at the right margin for left-to-right texts and at the left margin for right-to-left texts.
        "start"
      | 
        ## The text is ragged at the left margin for left-to-right texts and at the right margin for right-to-left texts.
        "end"
    }?,
    
    ## The thickness of the rule above the text.
    attribute border-top { text }?,
    
    ## The thickness of the rule below the text.
    attribute border-bottom { text }?,
    
    ## (Dis-)Allow break below the text. This only works if the following text is placed within the same PlaceObject or Output container.
    attribute break-below {
      
      ## Allow a break below this text (default).
      "yes"
      | 
        ## Prevent a page break below this text.
        "no"
    }?,
    
    ## The height of the padding that is inserted in a column (at the top) with Output/Text.
    attribute column-padding-top { text }?,
    
    ## Ensure the length of the last line in a paragraph. Values from 0 (no change) to 100 (last line is full). Handle with care. Default is 0.
    attribute fill-last-line { text }?,
    
    ## The character used for hyphenation (default: -)
    attribute hyphenchar { text }?,
    
    ## Enable or disable hyphenation (default: on).
    attribute hyphenate {
      
      ## Enable hyphenation (default).
      "yes"
      | 
        ## Disable hyphenation.
        "no"
    }?,
    
    ## The amount of indentation.
    attribute indentation { text }?,
    
    ## Distance between the bottom rule and the text of the next paragraph.
    attribute margin-bottom { text }?,
    
    ## Distance between the top rule and the text of the previous paragraph.
    attribute margin-top { text }?,
    
    ## The top margin at the beginning of a page or column with Output. Defaults to the value of margin-top.
    attribute margin-top-box-start { text }?,
    
    ## Name of the textformat that is used later in the layout.
    attribute name { text },
    
    ## If yes, allow orphans (first line of paragraph is on the previous page). If you provide a number, it is the number of lines that must be kept together. Default: no.
    attribute orphan {
      xsd:string { pattern = "[0-9]+|yes|no" }
    }?,
    
    ## Distance between the top of the text and the top rule.
    attribute padding-top { text }?,
    
    ## The number of rows with indentation given in the attribute indentation. If the number is negative, this determines the number of rows that are not indented.
    attribute rows { text }?,
    
    ## What to do on the tab (& #09;) character.
    attribute tab {
      
      ## Use tab as space
      "space"
      | 
        ## Use tab as a stretching space
        "hspace"
    }?,
    
    ## Set the vertical spacing for HTML contents. Defaults to “off”.
    attribute html-vertical-spacing {
      
      ## Allow each vertical spacing.
      "all"
      | 
        ## Discard first and last vertical spacing.
        "inner"
      | 
        ## Ignore all vertical spacing.
        "off"
    }?,
    
    ## If yes, allow widows (last line of paragraph is on the next page). If you provide a number, it is the number of lines that must be kept together.  Default: no.
    attribute widow {
      xsd:string { pattern = "[0-9]+|yes|no" }
    }?,
    empty
  }
e_Element =
  
  ## Create a data structure that can be used to save on the hard-drive between consecutive runs (with SaveDataset).
  element Element {
    (
     ## Name of the element that gets created.
     attribute name { text },
     (e_Attribute?
      & e_Copy-of?
      & e_Element?
      & e_ForAll?
      & e_Loop?
      & e_Makeindex?
      & e_Switch?
      & e_SortSequence?
      & e_Value?)+)
    & foreign-nodes
  }
e_Fallback =
  
  ## Define a fallback for LoadFontfile
  element Fallback {
    
    ## The filename of the font to be used as a fallback.
    attribute filename { text },
    empty
  }
e_Fontface =
  
  ## Switch to another font family.
  element Fontface {
    (
     ## The name of the font family to switch to.
     attribute fontfamily { text },
     (e_A
      | e_Action
      | e_B
      | e_Barcode
      | e_Br
      | e_Clip
      | e_Color
      | e_Fontface
      | e_ForAll
      | e_Frame
      | e_HSpace
      | e_I
      | e_Image
      | e_Loop
      | e_NoBreak
      | e_Sub
      | e_Sup
      | e_Span
      | e_Switch
      | e_U
      | e_URL
      | e_Value)*)
    & foreign-nodes
  }
e_ForAll =
  
  ## Executes the given commands for all elements in the data XML file that match the contents of the attribute select.
  element ForAll {
    (
     ## Selects the child elements from the data XML
     attribute select { text },
     
     ## Limits the number of children to the given number.
     attribute limit { text }?,
     
     ## The first entry to process. Default is 1.
     attribute start { text }?,
     (e_A?
      & e_Action?
      & e_AddSearchpath?
      & e_Attribute?
      & e_B?
      & e_Barcode?
      & e_Bookmark?
      & e_Box?
      & e_Br?
      & e_ClearPage?
      & e_Clip?
      & e_Color?
      & e_Column?
      & e_Columns?
      & e_Copy-of?
      & e_DefineColor?
      & e_DefineFontfamily?
      & e_DefineFontalias?
      & e_DefineTextformat?
      & e_DefineMatter?
      & e_Element?
      & e_Fontface?
      & e_ForAll?
      & e_Frame?
      & e_Group?
      & e_HSpace?
      & e_Hyphenation?
      & e_I?
      & e_Image?
      & e_Initial?
      & e_Include?
      & e_InsertPages?
      & e_Layout?
      & e_Li?
      & e_LoadDataset?
      & e_LoadFontfile?
      & e_Loop?
      & e_Message?
      & e_NewPage?
      & e_NextFrame?
      & e_NextRow?
      & e_NoBreak?
      & e_Options?
      & e_Output?
      & e_Pagetype?
      & e_Pageformat?
      & e_Paragraph?
      & e_PlaceObject?
      & e_PositioningArea?
      & e_PositioningFrame?
      & e_ProcessNode?
      & e_SaveDataset?
      & e_SavePages?
      & e_SetGrid?
      & e_SetVariable?
      & e_SortSequence?
      & e_Span?
      & e_Sub?
      & e_Sup?
      & e_Switch?
      & e_Table?
      & e_TableNewPage?
      & e_Tablehead?
      & e_Tablerule?
      & e_Td?
      & e_Tr?
      & e_Transformation?
      & e_Trace?
      & e_U?
      & e_Until?
      & e_Value?
      & e_VSpace?
      & e_While?)+)
    & foreign-nodes
  }
e_Frame =
  
  ## Manipulate an object's appearance by drawing a frame. Can be used as a clipping path.
  element Frame {
    (
     ## Color of the background if ›background‹ is set to ›full‹.
     attribute backgroundcolor { text }?,
     
     ## Radius of corner bottom right.
     attribute border-bottom-right-radius { text }?,
     
     ## Radius of corner top right.
     attribute border-top-right-radius { text }?,
     
     ## Radius of corner top left.
     attribute border-top-left-radius { text }?,
     
     ## Radius of corner bottom left.
     attribute border-bottom-left-radius { text }?,
     
     ## The color of the frame around the object. Only makes sense in combination with the attribute 'frame'.
     attribute framecolor { text }?,
     
     ## The thickness of the frame that is drawn around the object. Only makes sense in combination with the attribute 'frame'.
     attribute rulewidth { text }?,
     
     ## CSS class for this element.
     attribute class { text }?,
     
     ## CSS id for this element.
     attribute id { text }?,
     
     ## Constrain the contents of the frame to its area or allow them to protrude.
     attribute clip {
       
       ## The contents are clipped at the frame border (default).
       "yes"
       | 
         ## The contents are not clipped.
         "no"
     }?,
     (e_Image?
      & e_Box?
      & e_Circle?
      & e_Rule?
      & e_Textblock?
      & e_Barcode?
      & e_Table?
      & e_Transformation?
      & e_Frame?)+)
    & foreign-nodes
  }
e_Grid =
  
  ## Override the grid settings from SetGrid.
  element Grid {
    
    ## Set the width of a grid cell.
    attribute width { text }?,
    
    ## Height of a grid cell.
    attribute height { text }?,
    
    ## Number of grid cells in horizontal direction.
    attribute nx { text }?,
    
    ## Number of grid cells in vertical direction.
    attribute ny { text }?,
    
    ## Distance between two grid cells (horizontal)
    attribute dx { text }?,
    
    ## Distance between two grid cells (horizontal)
    attribute dy { text }?,
    empty
  }
e_Group =
  
  ## Create a virtual page that behaves like a real page but is not placed into the PDF.
  element Group {
    (
     ## Name of the group that is created.
     attribute name { text },
     (e_Contents & e_Grid?))
    & foreign-nodes
  }
e_Groupcontents =
  
  ## Insert the contents of a group (a virtual area)
  element Groupcontents {
    
    ## The name of the group
    attribute name { text },
    empty
  }
e_Hyphenation =
  
  ## Suggest a hyphenation. This hyphenation will be used in the running text. See the example.
  element Hyphenation {
    (
     ## The language for this hyphenation exception. The default is the main document language.
     attribute language {
       xsd:string { pattern = "\{.+\}" }
       | xsd:string {
           pattern =
             "--|bg|ca|cs|cy|da|de|el|en|en_GB|en_US|eo|es|et|eu|fi|fr|ga|gl|grc|gu|hi|hr|hu|hy|id|is|it|kn|ku|lt|lv|ml|nb|nl|nn|pl|pt|ro|ru|sc|sk|sl|sr|sv|tr|uk|zh"
         }
       | 
         ## Ancient Greek
         "Ancient Greek"
       | 
         ## Armenian
         "Armenian"
       | 
         ## Bahasa Indonesia
         "Bahasa Indonesia"
       | 
         ## Basque
         "Basque"
       | 
         ## Bulgarian (latin alphabet)
         "Bulgarian"
       | 
         ## Catalan
         "Catalan"
       | 
         ## Chinese language setting.
         "Chinese"
       | 
         ## Croatian
         "Croatian"
       | 
         ## Czech
         "Czech"
       | 
         ## Danish
         "Danish"
       | 
         ## Dutch
         "Dutch"
       | 
         ## British
         "English (Great Britain)"
       | 
         ## American English
         "English (USA)"
       | 
         ## Esperanto
         "Esperanto"
       | 
         ## Estonian
         "Estonian"
       | 
         ## Finnish
         "Finnish"
       | 
         ## French
         "French"
       | 
         ## Galician
         "Galician"
       | 
         ## German
         "German"
       | 
         ## Monotonic Greek
         "Greek"
       | 
         ## Gujarati
         "Gujarati"
       | 
         ## Hungarian
         "Hungarian"
       | 
         ## Hindi
         "Hindi"
       | 
         ## Icelandic
         "Icelandic"
       | 
         ## Irish
         "Irish"
       | 
         ## Italian
         "Italian"
       | 
         ## Kannada
         "Kannada"
       | 
         ## Kurmanji
         "Kurmanji"
       | 
         ## Latvian
         "Latvian"
       | 
         ## Lithuanian
         "Lithuanian"
       | 
         ## Malayalam
         "Malayalam"
       | 
         ## Norwegian Bokmål
         "Norwegian Bokmål"
       | 
         ## Norwegian Nynorsk
         "Norwegian Nynorsk"
       | 
         ## Don't any of these languages. Useful if a text does not render correctly.
         "Other"
       | 
         ## Polish
         "Polish"
       | 
         ## Portuguese
         "Portuguese"
       | 
         ## Romanian
         "Romanian"
       | 
         ## Russian
         "Russian"
       | 
         ## Serbian
         "Serbian"
       | 
         ## Serbian (cyrillic script).
         "Serbian (cyrillic)"
       | 
         ## Slovak
         "Slovak"
       | 
         ## Slovenian
         "Slovenian"
       | 
         ## Spanish
         "Spanish"
       | 
         ## Swedish
         "Swedish"
       | 
         ## Turkish
         "Turkish"
       | 
         ## Ukrainian
         "Ukrainian"
       | 
         ## Welsh
         "Welsh"
     }?,
     text)
    & foreign-nodes
  }
e_HSpace =
  
  ## Two modes: with a given width, the space takes up the given amount. 
  ##       With no width given: create a horizontal stretching space. The space will take up no width as a minimum but is able to stretch up to infinity. Useful in single line contexts. In normal text there will surprising little stretching involved due to the global paragraph optimization algorithm.
  ##         You will see that all other word spaces will have the minimum width and the excessive whitespace is accumulated at the strechable space.
  element HSpace {
    
    ## The text that should be displayed instead of the space. For example a dot (.).
    attribute leader { text }?,
    
    ## Distance between two leader text starting points
    attribute leader-width { text }?,
    
    ## The (optional) minimum width of the inserted space.
    attribute minwidth { text }?,
    
    ## Optional width of the space (a length).
    attribute width { text }?,
    empty
  }
e_I =
  
  ## Switch to italic text.
  element I {
    (e_A
     | e_Action
     | e_B
     | e_Barcode
     | e_Br
     | e_Clip
     | e_Color
     | e_Fontface
     | e_ForAll
     | e_Frame
     | e_HSpace
     | e_I
     | e_Image
     | e_Loop
     | e_NoBreak
     | e_Sub
     | e_Sup
     | e_Span
     | e_Switch
     | e_U
     | e_URL
     | e_Value)*
    & foreign-nodes
  }
e_Include =
  
  ## Toplevel element for included layout files.
  element Include {
    
    ## (not intended to be used, for error-free validation purpose only)
    attribute xml:base { text }?,
    (e_DefineColor?,
     e_DefineFontalias?,
     e_DefineFontfamily?,
     e_DefineTextformat?,
     e_Hyphenation?,
     e_LoadFontfile?,
     e_Options?,
     e_Pageformat?,
     e_Pagetype?,
     e_Record?,
     e_SetGrid?,
     e_SetVariable?,
     e_Stylesheet?,
     e_Switch?)+
  }
e_Initial =
  
  ## Make some letters appear in a larger font at the beginning of the paragraph.
  element Initial {
    (
     ## Set the color of the initial. Defaults to black.
     attribute color { text }?,
     
     ## Choose the font family. Only »Regular« shape is used at the moment.
     attribute fontfamily { text }?,
     
     ## Insert space left of the initial.
     attribute padding-left { text }?,
     
     ## Insert space right of the initial.
     attribute padding-right { text }?,
     
     ## Insert space top of the initial.
     attribute padding-top { text }?,
     
     ## Insert space bottom of the initial.
     attribute padding-bottom { text }?,
     e_Value)
    & foreign-nodes
  }
e_InsertPages =
  
  ## Insert previously saved pages or reserve space for pages to be generted in the future.
  ##       There are two modes: the first mode is to first save some pages with SavePages and then insert the pages here. The second mode reserves some pages in the PDF (has to be known in advace) that are created in the future (“future mode”) with SavePages.
  element InsertPages {
    
    ## The name of the saved pages.
    attribute name { text },
    
    ## Number of pages to be inserted in “future mode”.
    attribute pages { text }?,
    empty
  }
e_Image =
  
  ## Includes an external Graphic. Allowed graphic formats are PDF (.pdf), PNG (.png) and JPEG (.jpg). See below for a limitation on the number of included PDF files.
  element Image {
    (
     ## CSS class for this element.
     attribute class { text }?,
     
     ## CSS id for this element.
     attribute id { text }?,
     
     ## Should the image size increase by the amount of bleed setting (Options)?
     attribute bleed {
       
       ## If the image touches a paper edge, extend the image in that direction.
       "auto"
       | 
         ## Do not extend the image.
         "no"
     }?,
     
     ## When yes, the image keeps its aspect ratio if both width and hight is given. To be able to fit the image into the given dimensions, the image gets clipped.
     attribute clip {
       
       ## Keep the aspect ratio and cut off left/right or top/bottom edges.
       "yes"
       | 
         ## Distort the image to make it fit in the given area.
         "no"
     }?,
     
     ## Warn if the image gets lower resolution than given.
     attribute dpiwarn { text }?,
     
     ## The filename of the replacement image if the file is not found. If none given, a red 'file not found' image will gets displayed.
     attribute fallback { text }?,
     
     ## Filename of the image. Can be a file in the search path, an absolute file name, a file-URI for absolute paths (e.g. file:///path/to/image.pdf) or a location on the web (http, https).
     attribute file { text }?,
     
     ## Image height. One of 'auto' (default, take image width), length (such as '3cm') or number (in grid cells).
     attribute height { text }?,
     
     ## Try to load an image shape. Defaults to no.
     attribute imageshape { "yes" | "no" }?,
     
     ## The page number from the PDF. Default is 1 (include the first page).
     attribute page { text }?,
     
     ## The maximum width of the image. Only used when clip="no". Value is a number (grid cells), a length or the value »100%« for full width image.
     attribute maxwidth { text }?,
     
     ## The maximum height of the image. Only used when clip="no". Value is a number (grid cells) or a length.
     attribute maxheight { text }?,
     
     ## The minimum width of the image. Only used when clip="no". Value is a number (grid cells), a length or the value »100%« for full width image.
     attribute minwidth { text }?,
     
     ## The minimum height of the image. Only used when clip="no". Value is a number (grid cells) or a length.
     attribute minheight { text }?,
     
     ## Set image opacity (0-100, 100=fully opaque).
     attribute opacity { text }?,
     
     ## Set padding for all four sides.
     attribute padding { text }?,
     
     ## Set the inner distance (width between contents and the border) to the top edge.
     attribute padding-top { text }?,
     
     ## Set the inner distance (width between contents and the border) to the bottom edge.
     attribute padding-bottom { text }?,
     
     ## Set the inner distance (width between contents and the border) to the left edge.
     attribute padding-left { text }?,
     
     ## Set the inner distance (width between contents and the border) to the right edge.
     attribute padding-right { text }?,
     
     ## Stretch image until one of maximum width and maximum height is reached. Useful if images should be as large as possible but should not use more than the given space.
     attribute stretch { "yes" | "no" }?,
     
     ## Rotate the image in steps of 90°. The amount of movement is defined by the specified angle; if positive, the movement will be clockwise, if negative, it will be counter-clockwise.
     attribute rotate { text }?,
     
     ## The PDF box that represents the visible area of the included image. Default is “cropbox”.
     attribute visiblebox {
       
       ## Use the artbox as the visible area. The artbox is usually not contained in a PDF.
       "artbox"
       | 
         ## Use the bleedbox of the included PDF.
         "bleedbox"
       | 
         ## Use the cropbox of the included PDF (default).
         "cropbox"
       | 
         ## Use the mediabox of the included PDF. This is the largest box.
         "mediabox"
       | 
         ## Use the trimbox of the includes PDF. The trimbox is the final paper size. For example, the trim box of an A4 PDF is 210mm x 297mm.
         "trimbox"
       | xsd:string { pattern = "\{.+\}" }
     }?,
     
     ## Image width. One of 'auto' (default, take image width), '100%' (whole area width), length (such as '3cm') or number (in grid cells).
     attribute width { text }?,
     
     ## Set the converter to be used for the enclosed image (if any).
     attribute imagetype { text }?,
     e_Value?)
    & foreign-nodes
  }
e_Italic =
  
  ## The font face to be used when the user switches to italic.
  element Italic {
    
    ## The name of the fontface.
    attribute fontface { text },
    empty
  }
e_LoadDataset =
  
  ## Load an XML file previously written by SaveDataset (attribute name) or a well formed XML file (attribute filename). The regular data processing is interrupted and the contents of the data file is taken as a data source. If the file does not exist, the call to LoadDataset is ignored.
  element LoadDataset {
    
    ## Name of the data file. Example: toc
    attribute name { text }?,
    
    ## Filename of the XML file to load. Example: myfile.xml.
    attribute filename { text }?,
    empty
  }
e_LoadFontfile =
  
  ## Load a font file (.otf, .ttf, .pfb) and associate it with an internal name. If a glyph is not found in the font file, an error will be raised (this can be configured via the Options command). You can specify fallbacks as a child element of Loadfontfile.
  element LoadFontfile {
    (
     ## The internal name of the font file. To be used within DefineFontfamily.
     attribute name { text },
     
     ## A comma separated list of OpenType features, such as +liga,-kern
     attribute features { text }?,
     
     ## The name (with extension) of the font file.
     attribute filename { text },
     
     ## The amount of protrusion glyphs like -, . and - stick into the right margin. Highly font dependent. Defaults to 0.
     attribute marginprotrusion { text }?,
     
     ## Set the shaping mode of the font. Defaults to fontforge.
     attribute mode {
       
       ## The old and well tested font hanlder. Renders western scripts well, but no right-to-left or other complex scripts.
       "fontforge"
       | 
         ## The experimental new renderer that will eventually handle all scripts including right-to-left.
         "harfbuzz"
     }?,
     
     ## Use oldstyle figures if the font includes them. (OpenType feature »onum«)
     attribute oldstylefigures {
       
       ## Use oldstyle figures.
       "yes"
       | 
         ## Use lining figures.
         "no"
     }?,
     
     ## Use small caps glyphs when the font supplies them.
     attribute smallcaps {
       
       ## Use small caps for this font.
       "yes"
       | 
         ## Don't switch to small caps (default).
         "no"
     }?,
     
     ## The natural width between words. Can be stretched by 30% and shrunk by 10%. Defaults to 25. The value is a percentile of the font size.
     attribute space { text }?,
     (e_Fallback+)?)
    & foreign-nodes
  }
e_Layout =
  
  ## This command is the root element in the Layout instructions.
  element Layout {
    (
     ## Minimum publisher version required. If major or minor version differ, give a warning. Format: 1.6.12 (revision number can be left out).
     attribute version { text }?,
     
     ## A name for the layout. Optional, without any influence on the layout itself.
     attribute name { text }?,
     (e_AttachFile?,
      e_AddSearchpath?,
      e_Compatibility?,
      e_DefineColor?,
      e_DefineColorprofile?,
      e_DefineFontalias?,
      e_DefineGraphic?,
      e_DefineFontfamily?,
      e_DefineTextformat?,
      e_DefineMatter?,
      e_Hyphenation?,
      e_LoadFontfile?,
      e_Loop?,
      e_Options?,
      e_Pageformat?,
      e_Pagetype?,
      e_PlaceObject?,
      e_PDFOptions?,
      e_Record?,
      e_SetGrid?,
      e_SetVariable?,
      e_Stylesheet?,
      e_Switch?,
      e_Trace?,
      e_While?,
      e_Layout?,
      e_Include?)+)
    & foreign-nodes
  }
e_Li =
  
  ## List item in an ordered or unordered list.
  element Li {
    (e_A
     | e_Action
     | e_B
     | e_Barcode
     | e_Br
     | e_Clip
     | e_Color
     | e_Fontface
     | e_ForAll
     | e_Frame
     | e_HSpace
     | e_I
     | e_Image
     | e_Loop
     | e_NoBreak
     | e_Sub
     | e_Sup
     | e_Span
     | e_Switch
     | e_U
     | e_URL
     | e_Value)*
    & foreign-nodes
  }
e_Loop =
  
  ## Repeat the contents of this element several times.
  element Loop {
    (
     ## The number of loops. Must be a number or castable as a number.
     attribute select { text },
     
     ## If given, store the current loop value in this variable. If omitted, the loop value is stored in the variable _loopcounter.
     attribute variable { text }?,
     (e_A?
      & e_Action?
      & e_AddSearchpath?
      & e_Attribute?
      & e_B?
      & e_Barcode?
      & e_Bookmark?
      & e_Box?
      & e_Br?
      & e_ClearPage?
      & e_Clip?
      & e_Color?
      & e_Column?
      & e_Columns?
      & e_Copy-of?
      & e_DefineColor?
      & e_DefineFontfamily?
      & e_DefineFontalias?
      & e_DefineTextformat?
      & e_DefineMatter?
      & e_Element?
      & e_Fontface?
      & e_ForAll?
      & e_Frame?
      & e_Group?
      & e_HSpace?
      & e_Hyphenation?
      & e_I?
      & e_Image?
      & e_Initial?
      & e_Include?
      & e_InsertPages?
      & e_Layout?
      & e_Li?
      & e_LoadDataset?
      & e_LoadFontfile?
      & e_Loop?
      & e_Message?
      & e_NewPage?
      & e_NextFrame?
      & e_NextRow?
      & e_NoBreak?
      & e_Options?
      & e_Output?
      & e_Pagetype?
      & e_Pageformat?
      & e_Paragraph?
      & e_PlaceObject?
      & e_PositioningArea?
      & e_PositioningFrame?
      & e_ProcessNode?
      & e_SaveDataset?
      & e_SavePages?
      & e_SetGrid?
      & e_SetVariable?
      & e_SortSequence?
      & e_Span?
      & e_Sub?
      & e_Sup?
      & e_Switch?
      & e_Table?
      & e_TableNewPage?
      & e_Tablehead?
      & e_Tablerule?
      & e_Td?
      & e_Tr?
      & e_Transformation?
      & e_Trace?
      & e_U?
      & e_Until?
      & e_Value?
      & e_VSpace?
      & e_While?)+)
    & foreign-nodes
  }
e_Makeindex =
  
  ## Sort and split a list of elements to make an index.
  element Makeindex {
    
    ## The name of the attribute that holds the page numbers. Defaults to 'page'.
    attribute pagenumber { text }?,
    
    ## Create an XML-element with this name for every section (letter) in the index.
    attribute section { text },
    
    ## The xpath expression ($variable) that holds the element structure for the index.
    attribute select { text },
    
    ## The name of the attribute holding the indexentry (that should be sorted).
    attribute sortkey { text },
    empty
  }
e_Margin =
  
  ## Set the margin of the document or master page.
  element Margin {
    
    ## Left margin
    attribute left { text },
    
    ## Right margin
    attribute right { text },
    
    ## Top margin
    attribute top { text },
    
    ## Bottom margin
    attribute bottom { text },
    empty
  }
e_Mark =
  
  ## Sets an invisible mark into the output. This is helpful when you want to know on which page the mark is placed on.
  element Mark {
    
    ## When yes, append the current page to the previous values of the mark. Useful to get page ranges in an index. (Default is no.)
    attribute append {
      
      ## Append the page number to the previous value of the mark.
      "yes"
      | 
        ## Replace the previous value.
        "no"
    }?,
    
    ## The name of the mark to be set.
    attribute select { text },
    
    ## Raise the position of the hyperlink anchor by this amount.
    attribute shiftup { text }?,
    
    ## Set a pdf target that can be referenced by A
    attribute pdftarget { "yes" | "no" }?,
    empty
  }
e_Message =
  
  ## Writes a message onto the console and to the protocol file.
  element Message {
    (
     ## Contents of the message. You can alternatively specify the message by the child elements Value.
     attribute select { text }?,
     
     ## Generate an error besides writing the message.
     attribute error {
       
       ## Report an error.
       "yes"
       | 
         ## Do not report an error (default).
         "no"
     }?,
     
     ## If an error is raised, use this code on exit. Defaults to 1. Negative values are reserved for system purpose.
     attribute errorcode { text }?,
     
     ## Tells the software to exit immediately.
     attribute exit {
       
       ## The speedata Publisher continues with the PDF creation.
       "no"
       | 
         ## The speedata Publisher exits without finishing the PDF file.
         "yes"
     }?,
     ((e_Value+)? & (e_Element+)?))
    & foreign-nodes
  }
e_NewPage =
  
  ## Deprecated since 4.5.14. Use ClearPage (perhaps with option force="yes").
  ##       Finish the current page and creates a new one (only if new material for the page is available).
  element NewPage {
    
    ## Force the shipout of page now.
    attribute force { text }?,
    
    ## The next current page will be a left or a right page. E.g. when on page 1 and openon="right" then page 2 is empty and the next current page is 3.
    attribute openon {
      
      ## The next objects will be placed on a left page.
      "left"
      | 
        ## The next objects will be placed on a right page.
        "right"
    }?,
    
    ## The name of the next page type that should be used. If an InsertPage follows the NextPage, the pagetype is used for the first inserted page.
    attribute pagetype { text }?,
    
    ## The pagetype of the blank page if inserted (see the attribute openon).
    attribute skippagetype { text }?,
    empty
  }
e_NextFrame =
  
  ## Switch to the next free frame of a positioning area.
  element NextFrame {
    
    ## Name of the positioning area.
    attribute area { text },
    empty
  }
e_NextRow =
  
  ## The virtual cursor is set on the next free row.
  element NextRow {
    
    ## Name of the area of the virtual cursor.
    attribute area { text }?,
    
    ## The absolute number of the row for the cursor. If no row is given, the system tries to find a completely free row (perhaps on an empty page).
    attribute row { text }?,
    
    ## The number of rows to clear. Defaults to 1.
    attribute rows { text }?,
    empty
  }
e_NoBreak =
  
  ## Don't allow a line break within this element
  element NoBreak {
    (
     ## Set the maximum width of the text if it cannot be deduced from the current surrounding (such as table cells).
     attribute maxwidth { text }?,
     
     ## Reduce the text size if necessary.
     attribute reduce {
       
       ## Reduces the text by decreasing the font size.
       "fontsize"
       | 
         ## Inserts text given in the attribute text if the paragraph is too long.
         "cut"
       | 
         ## Don't allow a line break within NoBreak (default)
         "keeptogether"
     }?,
     
     ## The text to be inserted if the paragraph should be cut. For example '...'
     attribute text { text }?,
     
     ## Multiplier for the font size when reduce=fontsize. Default value: 0.9. That means the font size gets decreased by 0.9 until the text fits the objects width.
     attribute factor { text }?,
     
     ## The name of the fontface for text to be reduced. The default is »text« (lowercase t).
     attribute fontfamily { text }?,
     (e_A
      | e_Action
      | e_B
      | e_Barcode
      | e_Br
      | e_Clip
      | e_Color
      | e_Fontface
      | e_ForAll
      | e_Frame
      | e_HSpace
      | e_I
      | e_Image
      | e_Loop
      | e_NoBreak
      | e_Sub
      | e_Sup
      | e_Span
      | e_Switch
      | e_U
      | e_URL
      | e_Value)*)
    & foreign-nodes
  }
e_Ol =
  
  ## Create an ordered list, just like in HTML
  element Ol {
    (
     ## The name of the font family for the paragraph. The default is »text« (lowercase t).
     attribute fontfamily { text }?,
     (e_Li? & e_ForAll?)+)
    & foreign-nodes
  }
e_Options =
  
  ## Set publisher specific options.
  element Options {
    
    ## The amount of bleed. Defaults to 0mm.
    attribute bleed { text }?,
    
    ## Trim marks will be placed in the PDF. The distance of the marks from the imaginary center is determined by the attribute trim, but is at least 5mm. The length of the cut marks is 1cm. The default of this attribute is no, that means no trim marks will be displayed. The trim marks show the additional trim distance.
    attribute bleedmarks {
      
      ## Show trim marks.
      "yes"
      | 
        ## Don't show trim marks (default).
        "no"
    }?,
    
    ## Crop the pages so that the pdf size of the page is at its minimum. Allowed values are yes, no and a length.
    attribute crop { text }?,
    
    ## Cut marks / crop marks will be placed in the PDF. The distance of the marks from the imaginary center is determined by the attribute trim, but is at least 5mm. The length of the cut marks is 1cm. The default of this attribute is no, that means no cut marks will be displayed.
    attribute cutmarks {
      
      ## Show crop marks.
      "yes"
      | 
        ## Don't show crop marks (default).
        "no"
    }?,
    
    ## Name of the area that is used as a default for placing text (commands Output and PlaceObject). Default is _page.
    attribute defaultarea { text }?,
    
    ## Ignore newlines in data-xml
    attribute ignoreeol {
      
      ## Ignore newlines in data-xml
      "yes"
      | 
        ## Respect newlines in data-xml
        "no"
    }?,
    
    ## When an image is not found: should the publisher raise an error?
    attribute imagenotfound {
      
      ## Show a warning
      "warning"
      | 
        ## Raise an error (default)
        "error"
    }?,
    
    ## If no, switch off all interaction (hyperlinks).
    attribute interaction { "yes" | "no" }?,
    
    ## The default language for text (hyphenation and rendering). You can also set the default language on the command line and locally set it at Paragraph and Textblock.
    attribute mainlanguage {
      xsd:string { pattern = "\{.+\}" }
      | xsd:string {
          pattern =
            "--|bg|ca|cs|cy|da|de|el|en|en_GB|en_US|eo|es|et|eu|fi|fr|ga|gl|grc|gu|hi|hr|hu|hy|id|is|it|kn|ku|lt|lv|ml|nb|nl|nn|pl|pt|ro|ru|sc|sk|sl|sr|sv|tr|uk|zh"
        }
      | 
        ## Ancient Greek
        "Ancient Greek"
      | 
        ## Armenian
        "Armenian"
      | 
        ## Bahasa Indonesia
        "Bahasa Indonesia"
      | 
        ## Basque
        "Basque"
      | 
        ## Bulgarian (latin alphabet)
        "Bulgarian"
      | 
        ## Catalan
        "Catalan"
      | 
        ## Chinese language setting.
        "Chinese"
      | 
        ## Croatian
        "Croatian"
      | 
        ## Czech
        "Czech"
      | 
        ## Danish
        "Danish"
      | 
        ## Dutch
        "Dutch"
      | 
        ## British
        "English (Great Britain)"
      | 
        ## American English
        "English (USA)"
      | 
        ## Esperanto
        "Esperanto"
      | 
        ## Estonian
        "Estonian"
      | 
        ## Finnish
        "Finnish"
      | 
        ## French
        "French"
      | 
        ## Galician
        "Galician"
      | 
        ## German
        "German"
      | 
        ## Monotonic Greek
        "Greek"
      | 
        ## Gujarati
        "Gujarati"
      | 
        ## Hungarian
        "Hungarian"
      | 
        ## Hindi
        "Hindi"
      | 
        ## Icelandic
        "Icelandic"
      | 
        ## Irish
        "Irish"
      | 
        ## Italian
        "Italian"
      | 
        ## Kannada
        "Kannada"
      | 
        ## Kurmanji
        "Kurmanji"
      | 
        ## Latvian
        "Latvian"
      | 
        ## Lithuanian
        "Lithuanian"
      | 
        ## Malayalam
        "Malayalam"
      | 
        ## Norwegian Bokmål
        "Norwegian Bokmål"
      | 
        ## Norwegian Nynorsk
        "Norwegian Nynorsk"
      | 
        ## Don't any of these languages. Useful if a text does not render correctly.
        "Other"
      | 
        ## Polish
        "Polish"
      | 
        ## Portuguese
        "Portuguese"
      | 
        ## Romanian
        "Romanian"
      | 
        ## Russian
        "Russian"
      | 
        ## Serbian
        "Serbian"
      | 
        ## Serbian (cyrillic script).
        "Serbian (cyrillic)"
      | 
        ## Slovak
        "Slovak"
      | 
        ## Slovenian
        "Slovenian"
      | 
        ## Spanish
        "Spanish"
      | 
        ## Swedish
        "Swedish"
      | 
        ## Turkish
        "Turkish"
      | 
        ## Ukrainian
        "Ukrainian"
      | 
        ## Welsh
        "Welsh"
    }?,
    
    ## Set the seed for the random number generator (a positive integer).
    attribute randomseed { text }?,
    
    ## Yes: ignore the marks file from previous run.
    attribute resetmarks {
      
      ## Ignore marks from the previous run.
      "yes"
      | 
        ## Use marks from the previous run (default).
        "no"
    }?,
    
    ## Issue an error if glyphs are missing from a font.
    attribute reportmissingglyphs {
      
      ## Show error message (default)
      "yes"
      | 
        ## Do not show an error message
        "no"
      | 
        ## Show a warning
        "warning"
    }?,
    
    ## Set the number of the first page.
    attribute startpage { text }?,
    empty
  }
e_Otherwise =
  
  ## Default branch of a Switch command.
  element Otherwise {
    (e_A?,
     e_Action?,
     e_AddSearchpath?,
     e_Attribute?,
     e_B?,
     e_Barcode?,
     e_Bookmark?,
     e_Box?,
     e_Br?,
     e_ClearPage?,
     e_Clip?,
     e_Color?,
     e_Column?,
     e_Columns?,
     e_Copy-of?,
     e_DefineColor?,
     e_DefineFontfamily?,
     e_DefineFontalias?,
     e_DefineTextformat?,
     e_DefineMatter?,
     e_Element?,
     e_Fontface?,
     e_ForAll?,
     e_Frame?,
     e_Group?,
     e_HSpace?,
     e_Hyphenation?,
     e_I?,
     e_Image?,
     e_Initial?,
     e_Include?,
     e_InsertPages?,
     e_Layout?,
     e_Li?,
     e_LoadDataset?,
     e_LoadFontfile?,
     e_Loop?,
     e_Message?,
     e_NewPage?,
     e_NextFrame?,
     e_NextRow?,
     e_NoBreak?,
     e_Options?,
     e_Output?,
     e_Pagetype?,
     e_Pageformat?,
     e_Paragraph?,
     e_PlaceObject?,
     e_PositioningArea?,
     e_PositioningFrame?,
     e_ProcessNode?,
     e_SaveDataset?,
     e_SavePages?,
     e_SetGrid?,
     e_SetVariable?,
     e_SortSequence?,
     e_Span?,
     e_Sub?,
     e_Sup?,
     e_Switch?,
     e_Table?,
     e_TableNewPage?,
     e_Tablehead?,
     e_Tablerule?,
     e_Td?,
     e_Tr?,
     e_Transformation?,
     e_Trace?,
     e_U?,
     e_Until?,
     e_Value?,
     e_VSpace?,
     e_While?)+
    & foreign-nodes
  }
e_Output =
  
  ## This command is similar to PlaceObject and is currently limited to output text which can be broken across positioning frames and which can wrap around objects.
  element Output {
    (
     ## Should text flow around already allocated objects? This currently works on the current page only.
     attribute allocate {
       
       ## Regular behavior: the text does not flow around objects.
       "yes"
       | 
         ## Text flows around allocated objects.
         "auto"
       | xsd:string { pattern = "\{.+\}" }
     }?,
     
     ## The name of the positioning frame for the text.
     attribute area { text }?,
     
     ## Balance text on the last page (experimental)
     attribute balance {
       
       ## Balance the last page
       "yes"
       | 
         ## Do not balance the last page (default)
         "no"
     }?,
     
     ## The maximum padding on the last page when valign-last is set to bottom
     attribute last-padding-bottom-max { text }?,
     
     ## The starting row for the text.
     attribute row { text }?,
     
     ## When balancing: align the last columns at the top (default) or bottom (experimental).
     attribute valign-last {
       
       ## Top alignment (default)
       "top"
       | 
         ## Align at the bottom
         "bottom"
     }?,
     e_Text)
    & foreign-nodes
  }
e_Overlay =
  
  ## Overlays the first element with the following »positions«.
  element Overlay {
    (e_Image?,
     e_Box?,
     e_Circle?,
     e_Rule?,
     e_Textblock?,
     e_Barcode?,
     e_Table?,
     e_Transformation?,
     e_Frame?,
     e_Switch?,
     e_Position+)
    & foreign-nodes
  }
e_Paragraph =
  
  ## Insert a paragraph of text. The width of the paragraph is inherited from the surrounding element.
  element Paragraph {
    (
     ## CSS class for this paragraph.
     attribute class { text }?,
     
     ## CSS id for this paragraph.
     attribute id { text }?,
     
     ## (Experimental!) list of characters where a line break is possible. Space character is not implied when this attribute is set.
     attribute allowbreak { text }?,
     
     ## Analyze direction of the text. Useful for mixing left-to-right and right-to-left text.
     attribute bidi {
       
       ## Analyze text.
       "yes"
       | 
         ## Don't handle mixed directions (default).
         "no"
       | xsd:string { pattern = "\{.+\}" }
     }?,
     
     ## Color of the paragraph. Must be defined with DefineColor before use.
     attribute color { text }?,
     
     ## The text direction (ltr or rtl)
     attribute direction { text }?,
     
     ## The name of the font family for the paragraph. The default is »text« (lowercase t).
     attribute fontfamily { text }?,
     
     ## Set the HTML processing mode. Defaults to 'all'.
     attribute html {
       
       ## Interpret HTML starting from the current element.
       "all"
       | 
         ## Ignore the name of the outer element.
         "inner"
       | 
         ## Switch off HTML in this paragraph. Use only the text value.
         "off"
     }?,
     
     ## A text to the left of the paragraph.
     attribute label-left { text }?,
     
     ## Width of the text.
     attribute label-left-width { text }?,
     
     ## Alignment of the text.
     attribute label-left-align {
       
       ## Left aligned
       "left"
       | 
         ## Right aligned
         "right"
     }?,
     
     ## Horizontal distance between text and paragraph (if right aligned).
     attribute label-left-distance { text }?,
     
     ## Set the left padding, i.e. the inner distance to the allocated area.
     attribute padding-left { text }?,
     
     ## Set the right padding, i.e. the inner distance to the allocated area.
     attribute padding-right { text }?,
     
     ## The role for PDF/UA (accessibility, tagged PDF)
     attribute role {
       
       ## Heading level 1
       "H1"
       | 
         ## A paragraph.
         "P"
     }?,
     
     ## Name of the language for hyphenation and rendering.
     attribute language {
       xsd:string { pattern = "\{.+\}" }
       | xsd:string {
           pattern =
             "--|bg|ca|cs|cy|da|de|el|en|en_GB|en_US|eo|es|et|eu|fi|fr|ga|gl|grc|gu|hi|hr|hu|hy|id|is|it|kn|ku|lt|lv|ml|nb|nl|nn|pl|pt|ro|ru|sc|sk|sl|sr|sv|tr|uk|zh"
         }
       | 
         ## Ancient Greek
         "Ancient Greek"
       | 
         ## Armenian
         "Armenian"
       | 
         ## Bahasa Indonesia
         "Bahasa Indonesia"
       | 
         ## Basque
         "Basque"
       | 
         ## Bulgarian (latin alphabet)
         "Bulgarian"
       | 
         ## Catalan
         "Catalan"
       | 
         ## Chinese language setting.
         "Chinese"
       | 
         ## Croatian
         "Croatian"
       | 
         ## Czech
         "Czech"
       | 
         ## Danish
         "Danish"
       | 
         ## Dutch
         "Dutch"
       | 
         ## British
         "English (Great Britain)"
       | 
         ## American English
         "English (USA)"
       | 
         ## Esperanto
         "Esperanto"
       | 
         ## Estonian
         "Estonian"
       | 
         ## Finnish
         "Finnish"
       | 
         ## French
         "French"
       | 
         ## Galician
         "Galician"
       | 
         ## German
         "German"
       | 
         ## Monotonic Greek
         "Greek"
       | 
         ## Gujarati
         "Gujarati"
       | 
         ## Hungarian
         "Hungarian"
       | 
         ## Hindi
         "Hindi"
       | 
         ## Icelandic
         "Icelandic"
       | 
         ## Irish
         "Irish"
       | 
         ## Italian
         "Italian"
       | 
         ## Kannada
         "Kannada"
       | 
         ## Kurmanji
         "Kurmanji"
       | 
         ## Latvian
         "Latvian"
       | 
         ## Lithuanian
         "Lithuanian"
       | 
         ## Malayalam
         "Malayalam"
       | 
         ## Norwegian Bokmål
         "Norwegian Bokmål"
       | 
         ## Norwegian Nynorsk
         "Norwegian Nynorsk"
       | 
         ## Don't any of these languages. Useful if a text does not render correctly.
         "Other"
       | 
         ## Polish
         "Polish"
       | 
         ## Portuguese
         "Portuguese"
       | 
         ## Romanian
         "Romanian"
       | 
         ## Russian
         "Russian"
       | 
         ## Serbian
         "Serbian"
       | 
         ## Serbian (cyrillic script).
         "Serbian (cyrillic)"
       | 
         ## Slovak
         "Slovak"
       | 
         ## Slovenian
         "Slovenian"
       | 
         ## Spanish
         "Spanish"
       | 
         ## Swedish
         "Swedish"
       | 
         ## Turkish
         "Turkish"
       | 
         ## Ukrainian
         "Ukrainian"
       | 
         ## Welsh
         "Welsh"
     }?,
     
     ## Name of the textformat that is applied to the paragraph. If none is specified the textformat text is used.
     attribute textformat { text }?,
     e_Initial?,
     (e_A
      | e_Action
      | e_B
      | e_Barcode
      | e_Br
      | e_Clip
      | e_Color
      | e_Fontface
      | e_ForAll
      | e_Frame
      | e_HSpace
      | e_I
      | e_Image
      | e_Loop
      | e_NoBreak
      | e_Sub
      | e_Sup
      | e_Span
      | e_Switch
      | e_U
      | e_URL
      | e_Value)*)
    & foreign-nodes
  }
e_Pageformat =
  
  ## The size of the PDF pages. Defaults to 210mm width and 297mm height (A4)
  element Pageformat {
    
    ## The height of the PDF pages.
    attribute height { text },
    
    ## Width of the PDF pages.
    attribute width { text },
    empty
  }
e_Pagetype =
  
  ## Define a master page. A master page is chosen depending on the criterion given with the attribute »test«.
  element Pagetype {
    (
     ## Reverse the logical column ordering if in rtl mode. Only changes areas that are next to each other.
     attribute columnordering {
       
       ## The columns are ordered from first defined to last defined. (default)
       "ltr"
       | 
         ## Reverse the order of columns. The first defined column will be the last column.
         "rtl"
       | xsd:string { pattern = "\{.+\}" }
     }?,
     
     ## The default text color for this page (unless overridden in Paragraph or Textblock). Defaults to 'black'.
     attribute defaultcolor { text }?,
     
     ## Name of the master page. It is for informational purpose and as a selection for ClearPage.
     attribute name { text },
     
     ## The width of the page. Defaults to the global setting.
     attribute width { text }?,
     
     ## The height of the page. Defaults to the global setting.
     attribute height { text }?,
     
     ## Set the part of the document for this page type (mainmatter is the default).
     attribute part { text }?,
     
     ## If this xpath expression evaluates to true, this page is taken as a master page.
     attribute test { text },
     e_Margin?,
     ((e_PositioningArea+)?
      & e_AtPageCreation?
      & e_AtPageShipout?
      & e_ForAll?
      & e_Grid?))
    & foreign-nodes
  }
e_PDFOptions =
  
  ## Set PDF options like number of copies and such
  element PDFOptions {
    
    ## Set the output format. Currently limited to PDF/X-3, PDF/X-4 and PDF/UA.
    attribute format {
      
      ## Set the output to PDF/X-3.
      "PDF/X-3"
      | 
        ## Set the output to PDF/X-4.
        "PDF/X-4"
      | 
        ## Set the output to PDF/UA.
        "PDF/UA"
    }?,
    
    ## Set the name of the color profile. Has to be defined with DefineColorprofile.
    attribute colorprofile { text }?,
    
    ## Set the author of the document
    attribute author { text }?,
    
    ## Set the creator application of the document
    attribute creator { text }?,
    
    ## Select the display mode when opening PDF document (mainly with Acrobat).
    attribute displaymode {
      
      ## Display the attachment pane.
      "attachments"
      | 
        ## Display the bookmarks pane (only works if the PDF document contains at least one bookmark).
        "bookmarks"
      | 
        ## Open the document in fullscreen mode.
        "fullscreen"
      | 
        ## Do not display a special pane.
        "none"
      | 
        ## Display the thumbnail pane.
        "thumbnails"
    }?,
    
    ## Set viewer preference to one or two page printing. Default: empty.
    attribute duplex {
      
      ## One page per sheet
      "simplex"
      | 
        ## Two pages per sheet and flip on short edge
        "duplexflipshortedge"
      | 
        ## Two pages per sheet and flip on long edge
        "duplexfliplongedge"
    }?,
    
    ## Set the border color of hyperlinks when showhyperlinks is set. The default is black.
    attribute hyperlinksbordercolor { text }?,
    
    ## Set the keywords of the document (comma separated list).
    attribute keywords { text }?,
    
    ## Set the number of copies. At most 5 are allowed in the PDF specification.
    attribute numcopies { text }?,
    
    ## Activate the check box in the PDF viewer for choosing the paper tray based on the page size.
    attribute picktraybypdfsize {
      
      ## Activate checkbox
      "yes"
      | 
        ## Deactivate checkbox
        "no"
    }?,
    
    ## Should the printer scale the pages?
    attribute printscaling {
      
      ## Use the default from the PDF viewer
      "appdefault"
      | 
        ## No page scaling
        "none"
    }?,
    
    ## Show bookmarks in the PDF viewer when opening the document. Deprecated - use displaymode instead.
    attribute showbookmarks { "yes" | "no" }?,
    
    ## Show hyperlinks in Adobe Acrobat and perhaps other PDF viewers.
    attribute showhyperlinks { "yes" | "no" }?,
    
    ## Set the subject of the document
    attribute subject { text }?,
    
    ## Set the title of the document
    attribute title { text }?,
    empty
  }
e_PlaceObject =
  
  ## Outputs a rectangular object (image, table, box, barcode or textblock).
  element PlaceObject {
    (
     ## Determines if the area of the object is marked as »allocated«. With allocate="no", the cursor position is not changed.
     attribute allocate {
       
       ## Occupy space in the grid (default for grid positioning).
       "yes"
       | 
         ## Don't allocate space in the grid (default for absolute positioning).
         "no"
     }?,
     
     ## Additional allocation area to the left.
     attribute allocate-left { text }?,
     
     ## Additional allocation area to the right.
     attribute allocate-right { text }?,
     
     ## Additional allocation area to the top.
     attribute allocate-top { text }?,
     
     ## Additional allocation area to the bottom.
     attribute allocate-bottom { text }?,
     
     ## Name of the (positioning) area, the object is placed in. If no area is given, the object is placed on the main area, the page (this is the area that contains all grid cells).
     attribute area { text }?,
     
     ## Fill the background of the object (full grid cells) with a color, given by backgroundcolor.
     attribute background {
       
       ## Fill background with the given color (in backgroundcolor).
       "full"
       | 
         ## Empty background
         "without"
       | xsd:string { pattern = "\{.+\}" }
     }?,
     
     ## Color of the background if ›background‹ is set to ›full‹.
     attribute backgroundcolor { text }?,
     
     ## Radius of corner bottom right.
     attribute border-bottom-right-radius { text }?,
     
     ## Radius of corner top right.
     attribute border-top-right-radius { text }?,
     
     ## Radius of corner top left.
     attribute border-top-left-radius { text }?,
     
     ## Radius of corner bottom left.
     attribute border-bottom-left-radius { text }?,
     
     ## If contents is a number: the grid cell from the left margin of the area. If it is a length: the absolute position from the left paper margin. If this attribute is omitted, the system tries to place the object by itself.
     attribute column { text }?,
     
     ## Draw a frame around the object. You need to supply the frame color.
     attribute frame {
       
       ## Draw a frame around the object.
       "solid"
       | 
         ## Don't draw a frame around the object.
         "without"
     }?,
     
     ## The color of the frame around the object. Only makes sense in combination with the attribute 'frame'.
     attribute framecolor { text }?,
     
     ## The name of the group that gets output. When given a groupname, PlaceObject should not contain any objects.
     attribute groupname { text }?,
     
     ## Determines the placement of the object relative to the given column. If 'left' (which is the default), the given column is the left border of the object. If 'right', the column determines the right edge of the object.
     attribute hreference {
       
       ## The object is placed in given column.
       "left"
       | 
         ## The column determines the center of the object. Works only with absolute positioning.
         "center"
       | 
         ## The given columns determines the right edge of the border.
         "right"
       | xsd:string { pattern = "\{.+\}" }
     }?,
     
     ## When an object is placed on the grid and it's width is not a multiple of grid width, there is a space left on the page between the object an the next grid cell. With this attribute you can instruct the software where to place the gap.
     attribute halign {
       
       ## The object is aligned at the left.
       "left"
       | 
         ## The object is aligned so that the space to the left is the same as to the right.
         "center"
       | 
         ## The object is aligned to the right.
         "right"
       | xsd:string { pattern = "\{.+\}" }
     }?,
     
     ## Don't move the virtual cursor to the next free space
     attribute keepposition {
       
       ## Don't move the virtual cursor.
       "yes"
       | 
         ## Move the virtual cursor (default).
         "no"
     }?,
     
     ## Only used for multi-page table: the maximum height of tables.
     attribute maxheight { text }?,
     
     ## The origin for rotation.
     attribute origin-x {
       
       ## The origin is at the left hand side.
       "left"
       | 
         ## The origin is in the center of the object.
         "center"
       | 
         ## The origin is at the right hand side.
         "right"
     }?,
     
     ## The origin for rotation (on the vertical axis)
     attribute origin-y {
       
       ## Rotation around a point at the top.
       "top"
       | 
         ## Rotate around the vertical center.
         "center"
       | 
         ## Rotate around a point at the bottom.
         "bottom"
     }?,
     
     ## The page (later in the PDF), the object should appear on. Number of the keyword »next« for the next page.
     attribute page { text }?,
     
     ## The row where the object is placed. If none given, the publisher tries to find a row by itself. You can give a number (in grid cells) or an absolute value (from top left).
     attribute row { text }?,
     
     ## Rotates the object.  The amount of movement is defined by the specified angle; if positive, the movement will be clockwise, if negative, it will be counter-clockwise. When the angle is != 0 then grid allocation is turned off.
     attribute rotate { text }?,
     
     ## The thickness of the frame that is drawn around the object. Only makes sense in combination with the attribute 'frame'.
     attribute rulewidth { text }?,
     
     ## When an object is placed on the grid and it's height is not a multiple of grid height, there is a space left on the page between the object an the next grid cell. With this attribute you can instruct the software where to place the gap.
     attribute valign {
       
       ## The object is aligned at the top.
       "top"
       | 
         ## The object is aligned so that the space at the top is the same as at the bottom.
         "middle"
       | 
         ## The object is aligned at the bottom.
         "bottom"
     }?,
     
     ## Sets the placement of the object relative to the given row.
     attribute vreference {
       
       ## The row determines the bottom edge of the object.
       "bottom"
       | 
         ## If 'middle', the given row is the center of the object. Works only with absolute positioning.
         "middle"
       | 
         ## If 'top' (default), the given row is the top border of the object.
         "top"
     }?,
     (e_A?
      & e_Image?
      & e_Bookmark?
      & e_Box?
      & e_Clip?
      & e_Circle?
      & e_Rule?
      & e_Textblock?
      & e_Barcode?
      & e_Table?
      & e_Transformation?
      & e_Frame?
      & e_Switch?)+)
    & foreign-nodes
  }
e_Position =
  
  ## Add an element to the current Overlay.
  element Position {
    (
     ## The horizontal position (0=left, 100=right).
     attribute x { text },
     
     ## The vertical position (0=bottom, 100=top).
     attribute y { text },
     e_Image?,
     e_Box?,
     e_Circle?,
     e_Rule?,
     e_Textblock?,
     e_Barcode?,
     e_Table?,
     e_Transformation?,
     e_Frame?,
     e_Switch?)
    & foreign-nodes
  }
e_PositioningArea =
  
  ## Describes an area which contains one or more frames. Elements can be placed within these frames.
  element PositioningArea {
    (
     ## Name of the area.
     attribute name { text },
     
     ## Set the color of the frame in grid=yes mode. Defaults to 'red'
     attribute framecolor { text }?,
     (e_PositioningFrame? & e_Loop? & e_Switch?)+)
    & foreign-nodes
  }
e_PositioningFrame =
  
  ## Defines a rectangular area for objects.
  element PositioningFrame {
    
    ## The width of the frame in grid cells.
    attribute width { text },
    
    ## The height of the frame in grid cells.
    attribute height { text },
    
    ## The row number relative to the grid.
    attribute row { text },
    
    ## First column of the frame, in grid cells.
    attribute column { text },
    empty
  }
e_ProcessNode =
  
  ## Executes all given nodes. The elements, that are to be executed, are given with the attribute selection.
  element ProcessNode {
    
    ## Limits the number of items processed with this command
    attribute limit { text }?,
    
    ## Selection of child elements, that are to be processed.
    attribute select { text },
    
    ## Name of the mode. This must match the mode at the corresponding Record element. With this it is possible to have different rules for the same element.
    attribute mode { text }?,
    empty
  }
e_Record =
  
  ## Contains the instructions when the publisher processes the element in the data file with the given name. The record matching the root element will be called by the software automatically, all further data handling must be done by the user.
  element Record {
    (
     ## The name of the element the record matches.
     attribute element { text },
     
     ## Name of the mode that matches the mode in ProcessNode.
     attribute mode { text }?,
     (e_AddSearchpath?,
      e_AttachFile?,
      e_Bookmark?,
      e_ClearPage?,
      e_Copy-of?,
      e_DefineColor?,
      e_DefineFontfamily?,
      e_DefineFontalias?,
      e_DefineMatter?,
      e_DefineTextformat?,
      e_ForAll?,
      e_Group?,
      e_Hyphenation?,
      e_Include?,
      e_InsertPages?,
      e_Layout?,
      e_LoadDataset?,
      e_Loop?,
      e_Message?,
      e_NewPage?,
      e_NextFrame?,
      e_NextRow?,
      e_Options?,
      e_Output?,
      e_Pagetype?,
      e_Pageformat?,
      e_PDFOptions?,
      e_PlaceObject?,
      e_ProcessNode?,
      e_SaveDataset?,
      e_SavePages?,
      e_SetGrid?,
      e_SetVariable?,
      e_SortSequence?,
      e_Switch?,
      e_Until?,
      e_While?)+)
    & foreign-nodes
  }
e_Regular =
  
  ## The (symbolic) name of the fontface for regular text, i.e. without bold or italic.
  element Regular {
    
    ## The symbolic name of the font file.
    attribute fontface { text },
    empty
  }
e_Rule =
  
  ## Draw a horizontal or vertical rule in the grid.
  element Rule {
    
    ## The direction of the rule.
    attribute direction {
      
      ## Horizontal rule
      "horizontal"
      | 
        ## Vertical rule
        "vertical"
    },
    
    ## The rule thickness given in grid cells or as a length.
    attribute rulewidth { text }?,
    
    ## The length of the rule in grid cells or as an absolute length.
    attribute length { text },
    
    ## The color of the rule. Defaults to black.
    attribute color { text }?,
    
    ## Use a dashed rule instead of a solid rule.
    attribute dashed {
      
      ## Draw a dashed rule.
      "yes"
      | 
        ## Draw a solid rule.
        "no"
    }?,
    empty
  }
e_SaveDataset =
  
  ## Saves an element/attribute structure to be used in the next publisher run. The contents must have a tree structure.
  element SaveDataset {
    (
     ## Name of the file. Example: toc
     attribute name { text },
     
     ## Name of the root element that surrounds the elements given by the child elements.
     attribute elementname { text },
     
     ## Alternative to giving the data structure in the child elements.
     attribute select { text }?,
     
     ## The variable (as an XPath expression, e.g. $foo) which contains Attribute Elements. These attributes are added to the root element.
     attribute attributes { text }?,
     (e_Loop?,
      e_Element?,
      e_Makeindex?,
      e_SortSequence?,
      e_Copy-of?,
      e_ForAll?)+)
    & foreign-nodes
  }
e_SavePages =
  
  ## This command is used for two different but similar purposes.
  ##       1: Everything enclosed in SavePages is saved internally and not placed into the PDF. Useful if the output might be discarded.
  ##       2: “Future mode”: Create pages that have been previously reserved by InsertPages.
  element SavePages {
    (
     ## The name of the discarded output (1) or for the reserved pages (2). For later/earlier retrieval with InsertPages.
     attribute name { text },
     (e_AddSearchpath?
      & e_AttachFile?
      & e_Bookmark?
      & e_ClearPage?
      & e_Copy-of?
      & e_DefineColor?
      & e_DefineFontfamily?
      & e_DefineFontalias?
      & e_DefineMatter?
      & e_DefineTextformat?
      & e_ForAll?
      & e_Group?
      & e_Hyphenation?
      & e_Include?
      & e_InsertPages?
      & e_Layout?
      & e_LoadDataset?
      & e_Loop?
      & e_Message?
      & e_NewPage?
      & e_NextFrame?
      & e_NextRow?
      & e_Options?
      & e_Output?
      & e_Pagetype?
      & e_Pageformat?
      & e_PDFOptions?
      & e_PlaceObject?
      & e_ProcessNode?
      & e_SaveDataset?
      & e_SavePages?
      & e_SetGrid?
      & e_SetVariable?
      & e_SortSequence?
      & e_Switch?
      & e_Until?
      & e_While?)+)
    & foreign-nodes
  }
e_SetGrid =
  
  ## Set size of the grid cells. All objects are placed in the grid.
  element SetGrid {
    
    ## The width of a grid cell. Use either width or nx, not both.
    attribute width { text }?,
    
    ## The height of a grid cell. Use either height or ny, but not both.
    attribute height { text }?,
    
    ## Specify the number of grid cells in horizontal direction. Use either nx or width, not both.
    attribute nx { text }?,
    
    ## Set the number of grid cells in vertical direction. Give ny or height, but not both.
    attribute ny { text }?,
    
    ## Distance between two grid cells (horizontal)
    attribute dx { text }?,
    
    ## Distance between two grid cells (horizontal)
    attribute dy { text }?,
    empty
  }
sch:pattern [
  "\x{a}" ~
  "        "
  sch:rule [
    context = "t:SetVariable"
    "\x{a}" ~
    "          "
    sch:assert [
      test = "not(  not(empty(@select)) and node()  )"
      "SetVariable: either use select Attribute _or_ child elements, but not both."
    ]
    "\x{a}" ~
    "        "
  ]
  "\x{a}" ~
  "      "
]
e_SetVariable =
  
  ## Associates a value with a variable name. The value can be a simple value or a more complex one consisting of several elements.
  element SetVariable {
    (
     ## The name of the variable that holds the contents.
     attribute variable { text },
     
     ## The value of the contents.
     attribute select { text }?,
     
     ## Set the data type of the variable. Currently only supported for MetaPost variables.
     attribute type {
       
       ## The default (any) datatype for variables in the speedata layout language.
       "sd:any"
       | 
         ## A MetaPost CMYK color.
         "mp:cmykcolor"
       | 
         ## A MetaPost RGB color.
         "mp:rgbcolor"
     }?,
     
     ## Show information about the assignment in the log file.
     attribute trace {
       
       ## Show information.
       "yes"
       | 
         ## Don't show information (default).
         "no"
     }?,
     
     ## Execute the contents of setvariable now or execute it on usage.
     attribute execute {
       
       ## Execute the contents during SetVariable (default).
       "now"
       | 
         ## Execute the contents when evaluated during Copy-of. Experimental.
         "later"
     }?,
     (e_Attribute?
      & e_ClearPage?
      & e_Column?
      & e_Columns?
      & e_Copy-of?
      & e_Element?
      & e_ForAll?
      & e_Loop?
      & e_Paragraph?
      & e_PlaceObject?
      & e_Table?
      & e_TableNewPage?
      & e_Tablerule?
      & e_Tablehead?
      & e_Td?
      & e_Tr?
      & e_SortSequence?
      & e_Switch?
      & e_Value?)+)
    & foreign-nodes
  }
e_SortSequence =
  
  ## Sort a list.
  element SortSequence {
    
    ## The data that should be sorted.
    attribute select { text },
    
    ## If this attribute is used then it contains the name of the data-attribute that gets evaluated when duplicates are eliminated.
    attribute removeduplicates { text }?,
    
    ## Name of the attribute that is used as the sort key.
    attribute criterion { text },
    
    ## Sort alphabetical or numerical
    attribute numerical {
      
      ## Sort alphabetical
      "yes"
      | 
        ## Sort alphabetical (default)
        "no"
    }?,
    
    ## Select the sorting order
    attribute order {
      
      ## Use ascending sort order (default)
      "ascending"
      | 
        ## Use descending sort order
        "descending"
    }?,
    empty
  }
e_Span =
  
  ## Surround text by styling options.
  element Span {
    (
     ## CSS class for this element.
     attribute class { text }?,
     
     ## CSS id for this element.
     attribute id { text }?,
     
     ## The background color of the content
     attribute background-color { text }?,
     
     ## The top padding of the background color (can be negative)
     attribute background-padding-top { text }?,
     
     ## The bottom padding of the background color (can be negative)
     attribute background-padding-bottom { text }?,
     
     ## The name of the font family to switch to.
     attribute fontfamily { text }?,
     
     ## Name of the language for hyphenation and rendering.
     attribute language {
       xsd:string { pattern = "\{.+\}" }
       | xsd:string {
           pattern =
             "--|bg|ca|cs|cy|da|de|el|en|en_GB|en_US|eo|es|et|eu|fi|fr|ga|gl|grc|gu|hi|hr|hu|hy|id|is|it|kn|ku|lt|lv|ml|nb|nl|nn|pl|pt|ro|ru|sc|sk|sl|sr|sv|tr|uk|zh"
         }
       | 
         ## Ancient Greek
         "Ancient Greek"
       | 
         ## Armenian
         "Armenian"
       | 
         ## Bahasa Indonesia
         "Bahasa Indonesia"
       | 
         ## Basque
         "Basque"
       | 
         ## Bulgarian (latin alphabet)
         "Bulgarian"
       | 
         ## Catalan
         "Catalan"
       | 
         ## Chinese language setting.
         "Chinese"
       | 
         ## Croatian
         "Croatian"
       | 
         ## Czech
         "Czech"
       | 
         ## Danish
         "Danish"
       | 
         ## Dutch
         "Dutch"
       | 
         ## British
         "English (Great Britain)"
       | 
         ## American English
         "English (USA)"
       | 
         ## Esperanto
         "Esperanto"
       | 
         ## Estonian
         "Estonian"
       | 
         ## Finnish
         "Finnish"
       | 
         ## French
         "French"
       | 
         ## Galician
         "Galician"
       | 
         ## German
         "German"
       | 
         ## Monotonic Greek
         "Greek"
       | 
         ## Gujarati
         "Gujarati"
       | 
         ## Hungarian
         "Hungarian"
       | 
         ## Hindi
         "Hindi"
       | 
         ## Icelandic
         "Icelandic"
       | 
         ## Irish
         "Irish"
       | 
         ## Italian
         "Italian"
       | 
         ## Kannada
         "Kannada"
       | 
         ## Kurmanji
         "Kurmanji"
       | 
         ## Latvian
         "Latvian"
       | 
         ## Lithuanian
         "Lithuanian"
       | 
         ## Malayalam
         "Malayalam"
       | 
         ## Norwegian Bokmål
         "Norwegian Bokmål"
       | 
         ## Norwegian Nynorsk
         "Norwegian Nynorsk"
       | 
         ## Don't any of these languages. Useful if a text does not render correctly.
         "Other"
       | 
         ## Polish
         "Polish"
       | 
         ## Portuguese
         "Portuguese"
       | 
         ## Romanian
         "Romanian"
       | 
         ## Russian
         "Russian"
       | 
         ## Serbian
         "Serbian"
       | 
         ## Serbian (cyrillic script).
         "Serbian (cyrillic)"
       | 
         ## Slovak
         "Slovak"
       | 
         ## Slovenian
         "Slovenian"
       | 
         ## Spanish
         "Spanish"
       | 
         ## Swedish
         "Swedish"
       | 
         ## Turkish
         "Turkish"
       | 
         ## Ukrainian
         "Ukrainian"
       | 
         ## Welsh
         "Welsh"
     }?,
     
     ## Increase spacing between glyphs.
     attribute letter-spacing { text }?,
     (e_A
      | e_Action
      | e_B
      | e_Barcode
      | e_Br
      | e_Clip
      | e_Color
      | e_Fontface
      | e_ForAll
      | e_Frame
      | e_HSpace
      | e_I
      | e_Image
      | e_Loop
      | e_NoBreak
      | e_Sub
      | e_Sup
      | e_Span
      | e_Switch
      | e_U
      | e_URL
      | e_Value)*)
    & foreign-nodes
  }
e_Sub =
  
  ## Subscript text.
  element Sub { e_Value & foreign-nodes }
e_Sup =
  
  ## Superscript text.
  element Sup { e_Value & foreign-nodes }
e_Switch =
  
  ## Create an if-then-else construct. The test attribute of each Case commands is evaluated until it yields true. The contents of the Case gets executed. If no test succeeds, the (optional) Otherwise gets executed.
  element Switch { (e_Case+, e_Otherwise?) & foreign-nodes }
e_Stylesheet =
  
  ## Load a CSS file or define CSS rules
  element Stylesheet {
    (
     ## The filename of the CSS stylesheet including the file extension.
     attribute filename { text }?,
     text)
    & foreign-nodes
  }
e_Table =
  
  ## Create a table that is similar to the HTML table model.
  element Table {
    (
     ## Tries to balance the table on the last page according to the number of frames. Experimental!
     attribute balance {
       
       ## Tries to balance.
       "yes"
       | 
         ## First column will filled first, default
         "no"
     }?,
     
     ## Determine if adjacent table cells share borders. The behavior of border-collapse="collapse" is undefined when the table has columndistance or rowdistance set to a non-zero value and if the adjacent borders don't have the same width and color.
     attribute border-collapse {
       
       ## The borders are part of the cell and not shared with its neighbors.
       "separate"
       | 
         ## The borders of neighboring cells overlap.
         "collapse"
     }?,
     
     ## Distance between two table columns.
     attribute columndistance { text }?,
     
     ## Evaluates the given XPath expression and discards its output.
     attribute eval { text }?,
     
     ## Name of the font family for the table. If not given, the font face ‘text’ is used.
     attribute fontfamily { text }?,
     
     ## The distance between two rows.
     attribute leading { text }?,
     
     ## The distance between the table border and the table contents.
     attribute padding { text }?,
     
     ## If the table contents is narrow and stretch has the value no, the table only uses the minimal width. If the table contents is wider than the value width or stretch has the value max, the table's width is the size given in the width attribute.
     attribute stretch {
       
       ## Stretch the table to its given width.
       "max"
       | 
         ## The table width is the minimum width depending on it's contents.
         "no"
     }?,
     
     ## The text format for the table. Defaults to __leftaligned if no align attribute is given.
     attribute textformat { text }?,
     
     ## The maximum width of the table (in grid cells or absolute values). Defaults to the available space.
     attribute width { text }?,
     
     ## Set behaviour when cells stretch in vertical direction due to rowspans.
     attribute vexcess {
       
       ## Stretch all table cells evenly (default).
       "stretch"
       | 
         ## Only stretch the last table cell.
         "bottom"
       | xsd:string { pattern = "\{.+\}" }
     }?,
     (e_Tablehead?
      & e_Tablefoot?
      & e_TableNewPage?
      & e_Columns?
      & e_Tr?
      & e_Copy-of?
      & e_Tablerule?
      & e_Message?
      & e_Switch?
      & e_Loop?
      & e_ForAll?)+)
    & foreign-nodes
  }
e_Tablefoot =
  
  ## Create a repeating table footer.
  element Tablefoot {
    (
     ## This command is only valid for the given pages. The default is to place the foot on all pages.
     attribute page {
       
       ## Place the footer on all pages.
       "all"
       | 
         ## Display the table footer only on the last page.
         "last"
     }?,
     (e_Tablerule? & e_Copy-of? & e_Tr? & e_Switch? & e_ForAll?)+)
    & foreign-nodes
  }
e_Tablehead =
  
  ## Create a repeating table head.
  element Tablehead {
    (
     ## The page the table head should appear on. Defaults to »all«
     attribute page {
       
       ## Only appear on the first page.
       "first"
       | 
         ## All pages. If »first« is defined, the tablehead appears on all pages but the first.
         "all"
     }?,
     (e_Copy-of? & e_ForAll? & e_Switch? & e_Tablerule? & e_Tr?)+)
    & foreign-nodes
  }
e_TableNewPage =
  
  ## Switches to a new page within the table.
  element TableNewPage { empty }
e_Td =
  
  ## Td wraps a table cell, just like HTML.
  element Td {
    (
     ## The css class to be used for formatting the table cell.
     attribute class { text }?,
     
     ## CSS id for this table cell.
     attribute id { text }?,
     
     ## Horizontal alignment of the cell contents. Defaults to left.
     attribute align {
       
       ## The contents is left aligned (ragged right). This is the default.
       "left"
       | 
         ## The contents of the cell is right aligned.
         "right"
       | 
         ## The contents of the cell is aligned at the center, with ragged right and left margin.
         "center"
       | 
         ## Justified text with straight margins.
         "justify"
       | xsd:string { pattern = "\{.+\}" }
     }?,
     
     ## The name of the background color (if the cell should get a background).
     attribute backgroundcolor { text }?,
     
     ## Set the font family of the background text. Defaults to the table font.
     attribute background-font-family { text }?,
     
     ## The color of the text in the background (if any).
     attribute background-textcolor { text }?,
     
     ## Controls the size of the background text. Currently only 'contain' and 'auto' is allowed.
     attribute background-size {
       
       ## Fill the height of the table cell.
       "contain"
       | 
         ## The background text is not scaled.
         "auto"
     }?,
     
     ## The transformation of the background text (if any). Currently supported: rotate(-40deg) (and other angles in the range 0 to -90).
     attribute background-transform { text }?,
     
     ## A text that should be placed in the background of the table cell.
     attribute background-text { text }?,
     
     ## The width (thickness) of the left border. The border is inside the cell.
     attribute border-left { text }?,
     
     ## The width (thickness) of the right border. The border is inside the cell.
     attribute border-right { text }?,
     
     ## The width (thickness) of the top border. The border is inside the cell.
     attribute border-top { text }?,
     
     ## The width (thickness) of the bottom border. The border is inside the cell.
     attribute border-bottom { text }?,
     
     ## The color of the left border.
     attribute border-left-color { text }?,
     
     ## The color of the left border.
     attribute border-right-color { text }?,
     
     ## The color of the top border.
     attribute border-top-color { text }?,
     
     ## The color of the bottom border.
     attribute border-bottom-color { text }?,
     
     ## The number of columns this cell spans. Defaults to 1.
     attribute colspan { text }?,
     
     ## Draw the predefined MetaPost graphic around the table cell (experimental).
     attribute graphics { text }?,
     
     ## Shorthand for setting padding-top and the other values with this length.
     attribute padding { text }?,
     
     ## Set the inner distance (width between contents and the border) to the top edge.
     attribute padding-top { text }?,
     
     ## Set the inner distance (width between contents and the border) to the bottom edge.
     attribute padding-bottom { text }?,
     
     ## Set the inner distance (width between contents and the border) to the left edge.
     attribute padding-left { text }?,
     
     ## Set the inner distance (width between contents and the border) to the right edge.
     attribute padding-right { text }?,
     
     ## The number of rows for this cell. Defaults to 1.
     attribute rowspan { text }?,
     
     ## Rotate the contents of the table cell. Positive values return clockwise. This is experimental and currently only for text.
     attribute rotate { text }?,
     
     ## The vertical alignment of the cell.
     attribute valign {
       
       ## The contents is aligned at the top edge of the cell.
       "top"
       | 
         ## The contents is vertically centered.
         "middle"
       | 
         ## The contents is aligned at the bottom edge of the cell.
         "bottom"
       | xsd:string { pattern = "\{.+\}" }
     }?,
     (e_Barcode
      | e_Bookmark
      | e_Box
      | e_Copy-of
      | e_Frame
      | e_Groupcontents
      | e_ForAll
      | e_Image
      | e_Loop
      | e_Overlay
      | e_Paragraph
      | e_Switch
      | e_Table
      | e_VSpace)*)
    & foreign-nodes
  }
e_Tablerule =
  
  ## Insert a horizontal rule in a table
  element Tablerule {
    
    ## The width (thickness) of the rule. Defaults to 0.25pt.
    attribute rulewidth { text }?,
    
    ## The color of the rule. Defaults to black. A color named “-” (without quotes) is a transparent “color”.
    attribute color { text }?,
    
    ## The first column of the rule. Defaults to 1.
    attribute start { text }?,
    
    ## Allow break below the table rule?
    attribute break-below { "yes" | "no" }?,
    
    ## CSS class for this element.
    attribute class { text }?,
    
    ## CSS id for this element.
    attribute id { text }?,
    empty
  }
e_Textblock =
  
  ## Create a rectangular piece of text.
  element Textblock {
    (
     ## The angle (counter clockwise) that the text gets turned.
     attribute angle { text }?,
     
     ## The name of the color of the text.
     attribute color { text }?,
     
     ## Number of columns in the textblock. Do not use multi columns for any other purposes than simple text.
     attribute columns { text }?,
     
     ## Distance between two columns. Defaults to 3mm.
     attribute columndistance { text }?,
     
     ## The name of the font family. Defaults to text.
     attribute fontfamily { text }?,
     
     ## Set the language for hyphenation and rendering.
     attribute language {
       xsd:string { pattern = "\{.+\}" }
       | xsd:string {
           pattern =
             "--|bg|ca|cs|cy|da|de|el|en|en_GB|en_US|eo|es|et|eu|fi|fr|ga|gl|grc|gu|hi|hr|hu|hy|id|is|it|kn|ku|lt|lv|ml|nb|nl|nn|pl|pt|ro|ru|sc|sk|sl|sr|sv|tr|uk|zh"
         }
       | 
         ## Ancient Greek
         "Ancient Greek"
       | 
         ## Armenian
         "Armenian"
       | 
         ## Bahasa Indonesia
         "Bahasa Indonesia"
       | 
         ## Basque
         "Basque"
       | 
         ## Bulgarian (latin alphabet)
         "Bulgarian"
       | 
         ## Catalan
         "Catalan"
       | 
         ## Chinese language setting.
         "Chinese"
       | 
         ## Croatian
         "Croatian"
       | 
         ## Czech
         "Czech"
       | 
         ## Danish
         "Danish"
       | 
         ## Dutch
         "Dutch"
       | 
         ## British
         "English (Great Britain)"
       | 
         ## American English
         "English (USA)"
       | 
         ## Esperanto
         "Esperanto"
       | 
         ## Estonian
         "Estonian"
       | 
         ## Finnish
         "Finnish"
       | 
         ## French
         "French"
       | 
         ## Galician
         "Galician"
       | 
         ## German
         "German"
       | 
         ## Monotonic Greek
         "Greek"
       | 
         ## Gujarati
         "Gujarati"
       | 
         ## Hungarian
         "Hungarian"
       | 
         ## Hindi
         "Hindi"
       | 
         ## Icelandic
         "Icelandic"
       | 
         ## Irish
         "Irish"
       | 
         ## Italian
         "Italian"
       | 
         ## Kannada
         "Kannada"
       | 
         ## Kurmanji
         "Kurmanji"
       | 
         ## Latvian
         "Latvian"
       | 
         ## Lithuanian
         "Lithuanian"
       | 
         ## Malayalam
         "Malayalam"
       | 
         ## Norwegian Bokmål
         "Norwegian Bokmål"
       | 
         ## Norwegian Nynorsk
         "Norwegian Nynorsk"
       | 
         ## Don't any of these languages. Useful if a text does not render correctly.
         "Other"
       | 
         ## Polish
         "Polish"
       | 
         ## Portuguese
         "Portuguese"
       | 
         ## Romanian
         "Romanian"
       | 
         ## Russian
         "Russian"
       | 
         ## Serbian
         "Serbian"
       | 
         ## Serbian (cyrillic script).
         "Serbian (cyrillic)"
       | 
         ## Slovak
         "Slovak"
       | 
         ## Slovenian
         "Slovenian"
       | 
         ## Spanish
         "Spanish"
       | 
         ## Swedish
         "Swedish"
       | 
         ## Turkish
         "Turkish"
       | 
         ## Ukrainian
         "Ukrainian"
       | 
         ## Welsh
         "Welsh"
     }?,
     
     ## The minimum height of the textblock, given as a length or number (grid cells).
     attribute minheight { text }?,
     
     ## The name of the text format to be applied to the text. Defaults to text.
     attribute textformat { text }?,
     
     ## Number of columns for the text. If not given, the surrounding element determines the width of the element.
     attribute width { text }?,
     (e_Action
      | e_Bookmark
      | e_Copy-of
      | e_ForAll
      | e_Loop
      | e_Ol
      | e_Paragraph
      | e_Switch
      | e_Ul
      | e_Value)+)
    & foreign-nodes
  }
e_Text =
  
  ## Create a text that can be broken across text containers or pages. To be used with Output
  element Text {
    (
     ## The name of the color of the text.
     attribute color { text }?,
     
     ## The name of the font family. Defaults to text.
     attribute fontface { text }?,
     
     ## The name of the font family. Defaults to text.
     attribute fontfamily { text }?,
     
     ## The name of the text format to be applied to the text. Defaults to text.
     attribute textformat { text }?,
     (e_Action
      | e_Bookmark
      | e_Copy-of
      | e_ForAll
      | e_Image
      | e_Loop
      | e_Ol
      | e_Paragraph
      | e_Switch
      | e_Ul
      | e_Value)+)
    & foreign-nodes
  }
e_Trace =
  
  ## Set debugging switches
  element Trace {
    
    ## Write assignments (SetVariable) to the log file.
    attribute assignments {
      
      ## Verbose output in the protocol file.
      "yes"
      | 
        ## Regular run (default).
        "no"
    }?,
    
    ## Draw the grid on the page.
    attribute grid {
      
      ## Show the grid.
      "yes"
      | 
        ## Don't show the grid (default).
        "no"
    }?,
    
    ## Draw allocated cells with yellow and conflicts with red markers.
    attribute gridallocation {
      
      ## Show grid allocation.
      "yes"
      | 
        ## Don't show the grid allocation (default).
        "no"
    }?,
    
    ## Draw little marks to show all hyphenation points.
    attribute hyphenation {
      
      ## Show hyphenation points.
      "yes"
      | 
        ## Don't show any hyphenation points (default).
        "no"
    }?,
    
    ## Draw little marks to show all kerning.
    attribute kerning {
      
      ## Show kerning.
      "yes"
      | 
        ## Don't show any kerning (default).
        "no"
    }?,
    
    ## Draw rectangles around objects.
    attribute objects {
      
      ## Draw rectangles
      "yes"
      | 
        ## No rectangles drawn around objects (default).
        "no"
    }?,
    
    ## Verbose output in the protocol file.
    attribute verbose {
      
      ## Verbose output in the protocol file.
      "yes"
      | 
        ## Regular run (default).
        "no"
    }?,
    
    ## Show textformt as a tooltip in the PDF
    attribute textformat {
      
      ## Show textformat
      "yes"
      | 
        ## Don't show textformat (default)
        "no"
    }?,
    empty
  }
e_Tr =
  
  ## Tablerow
  element Tr {
    (
     ## Horizontal alignment of the table cells in this row.
     attribute align {
       
       ## The contents is left aligned (ragged right). This is the default.
       "left"
       | 
         ## The contents of the cell is right aligned.
         "right"
       | 
         ## The contents of the cell is aligned at the center, with ragged right and left margin.
         "center"
       | 
         ## Justified text with straight margins.
         "justify"
     }?,
     
     ## Background color of each cell in this row.
     attribute backgroundcolor { text }?,
     
     ## Allow a table break between this row and the following.
     attribute break-below {
       
       ## Allow a table break between this row and the following (default).
       "yes"
       | 
         ## Disable a table break between this row and the following.
         "no"
       | xsd:string { pattern = "\{.+\}" }
     }?,
     
     ## Data that can be accessed via $_last_tr_data in the tablefoot and tablehead.
     attribute data { text }?,
     
     ## Minimum row height in grid cells or length.
     attribute minheight { text }?,
     
     ## Use this line for future table heads.
     attribute sethead {
       
       ## Use this line for future table heads.
       "yes"
       | 
         ## No special treatment of this line (default).
         "no"
       | 
         ## Delete head. Next pages will have no head until new one is set with 'yes'.
         "clear"
       | xsd:string { pattern = "\{.+\}" }
     }?,
     
     ## The space above this row if it is not the first line on a new page / area.
     attribute top-distance { text }?,
     
     ## Vertical alignment of the table cells in this row.
     attribute valign {
       
       ## The objects in this row are aligned at the top.
       "top"
       | 
         ## The objects in this row are aligned at the middle axis.
         "middle"
       | 
         ## The objects in this row are aligned at the bottom.
         "bottom"
       | xsd:string { pattern = "\{.+\}" }
     }?,
     (e_Message?, e_Td?, e_Copy-of?, e_Switch?, e_ForAll?, e_Loop?)+)
    & foreign-nodes
  }
e_Transformation =
  
  ## Manipulate an object's appearance by applying a matrix. See the PDF reference 4.2.2 Common Transformations and following.
  element Transformation {
    (
     ## The transformation matrix for the object. Expected is a space separated string of six values.
     attribute matrix { text }?,
     
     ## The origin for matrix transformation. Must be left, center or right or a number from 0 to 100 (0 = left, 100 = right).
     attribute origin-x { text }?,
     
     ## The vertical origin for the matrix transformation. Must be top, center or bottom or a number from 0 to 100 (0 = top, 100 = bottom).
     attribute origin-y { text }?,
     (e_Image?
      & e_Box?
      & e_Circle?
      & e_Rule?
      & e_Textblock?
      & e_Barcode?
      & e_Table?
      & e_Frame?
      & e_Transformation?)+)
    & foreign-nodes
  }
e_U =
  
  ## Underline text.
  element U {
    (
     ## Use a dashed rule instead of a solid rule.
     attribute dashed {
       
       ## Draw a dashed rule.
       "yes"
       | 
         ## Draw a solid rule.
         "no"
     }?,
     
     ## CSS class for this element.
     attribute class { text }?,
     
     ## CSS id for this element.
     attribute id { text }?,
     (e_A
      | e_Action
      | e_B
      | e_Barcode
      | e_Br
      | e_Clip
      | e_Color
      | e_Fontface
      | e_ForAll
      | e_Frame
      | e_HSpace
      | e_I
      | e_Image
      | e_Loop
      | e_NoBreak
      | e_Sub
      | e_Sup
      | e_Span
      | e_Switch
      | e_U
      | e_URL
      | e_Value)*)
    & foreign-nodes
  }
e_Ul =
  
  ## Create an unordered list, just like in HTML
  element Ul {
    (
     ## The name of the font family for the paragraph. The default is »text« (lowercase t).
     attribute fontfamily { text }?,
     (e_Li? & e_ForAll?)+)
    & foreign-nodes
  }
e_Until =
  
  ## Create a loop. All child elements are executed repeatedly until the given condition is true.
  element Until {
    (
     ## Every time after the the loop is executed, the condition is evaluated. If it is true, the loop exits.
     attribute test { text },
     (e_A?
      & e_Action?
      & e_AddSearchpath?
      & e_Attribute?
      & e_B?
      & e_Barcode?
      & e_Bookmark?
      & e_Box?
      & e_Br?
      & e_ClearPage?
      & e_Clip?
      & e_Color?
      & e_Column?
      & e_Columns?
      & e_Copy-of?
      & e_DefineColor?
      & e_DefineFontfamily?
      & e_DefineFontalias?
      & e_DefineTextformat?
      & e_DefineMatter?
      & e_Element?
      & e_Fontface?
      & e_ForAll?
      & e_Frame?
      & e_Group?
      & e_HSpace?
      & e_Hyphenation?
      & e_I?
      & e_Image?
      & e_Initial?
      & e_Include?
      & e_InsertPages?
      & e_Layout?
      & e_Li?
      & e_LoadDataset?
      & e_LoadFontfile?
      & e_Loop?
      & e_Message?
      & e_NewPage?
      & e_NextFrame?
      & e_NextRow?
      & e_NoBreak?
      & e_Options?
      & e_Output?
      & e_Pagetype?
      & e_Pageformat?
      & e_Paragraph?
      & e_PlaceObject?
      & e_PositioningArea?
      & e_PositioningFrame?
      & e_ProcessNode?
      & e_SaveDataset?
      & e_SavePages?
      & e_SetGrid?
      & e_SetVariable?
      & e_SortSequence?
      & e_Span?
      & e_Sub?
      & e_Sup?
      & e_Switch?
      & e_Table?
      & e_TableNewPage?
      & e_Tablehead?
      & e_Tablerule?
      & e_Td?
      & e_Tr?
      & e_Transformation?
      & e_Trace?
      & e_U?
      & e_Until?
      & e_Value?
      & e_VSpace?
      & e_While?)+)
    & foreign-nodes
  }
e_URL =
  
  ## enables a better breaking of URLs.
  element URL {
    (e_A
     | e_Action
     | e_B
     | e_Barcode
     | e_Br
     | e_Clip
     | e_Color
     | e_Fontface
     | e_ForAll
     | e_Frame
     | e_HSpace
     | e_I
     | e_Image
     | e_Loop
     | e_NoBreak
     | e_Sub
     | e_Sup
     | e_Span
     | e_Switch
     | e_U
     | e_URL
     | e_Value)*
    & foreign-nodes
  }
e_Value =
  
  ## Contains a text value that is passed to the surrounding element.
  element Value {
    (
     ## Value to be passed to the outer element.
     attribute select { text }?,
     (text*
      & element br { empty }*))
    & foreign-nodes
  }
e_VSpace =
  
  ## Create a vertically stretching space. The space has a minimum height of 0 but is able to stretch up to infinity. Useful in table cells.
  element VSpace {
    
    ## The (optional) minimum height of the inserted space.
    attribute minheight { text }?,
    
    ## Optional height of the space (a length).
    attribute height { text }?,
    empty
  }
e_While =
  
  ## Create a loop. All child elements are executed as long as the condition in the test attribute evaluates to true.
  element While {
    (
     ## Every time before the the loop is executed, this condition must evaluate to true. See the command Until for a loop with an exit test.
     attribute test { text },
     (e_A?
      & e_Action?
      & e_AddSearchpath?
      & e_Attribute?
      & e_B?
      & e_Barcode?
      & e_Bookmark?
      & e_Box?
      & e_Br?
      & e_ClearPage?
      & e_Clip?
      & e_Color?
      & e_Column?
      & e_Columns?
      & e_Copy-of?
      & e_DefineColor?
      & e_DefineFontfamily?
      & e_DefineFontalias?
      & e_DefineTextformat?
      & e_DefineMatter?
      & e_Element?
      & e_Fontface?
      & e_ForAll?
      & e_Frame?
      & e_Group?
      & e_HSpace?
      & e_Hyphenation?
      & e_I?
      & e_Image?
      & e_Initial?
      & e_Include?
      & e_InsertPages?
      & e_Layout?
      & e_Li?
      & e_LoadDataset?
      & e_LoadFontfile?
      & e_Loop?
      & e_Message?
      & e_NewPage?
      & e_NextFrame?
      & e_NextRow?
      & e_NoBreak?
      & e_Options?
      & e_Output?
      & e_Pagetype?
      & e_Pageformat?
      & e_Paragraph?
      & e_PlaceObject?
      & e_PositioningArea?
      & e_PositioningFrame?
      & e_ProcessNode?
      & e_SaveDataset?
      & e_SavePages?
      & e_SetGrid?
      & e_SetVariable?
      & e_SortSequence?
      & e_Span?
      & e_Sub?
      & e_Sup?
      & e_Switch?
      & e_Table?
      & e_TableNewPage?
      & e_Tablehead?
      & e_Tablerule?
      & e_Td?
      & e_Tr?
      & e_Transformation?
      & e_Trace?
      & e_U?
      & e_Until?
      & e_Value?
      & e_VSpace?
      & e_While?)+)
    & foreign-nodes
  }
# This pattern allows any element from any namespace
anything =
  (element * { anything }
   | attribute * { text }
   | text)*
foreign-elements = element * - (local:* | ns2:* | ns1:*) { anything }*
foreign-attributes = attribute * - (local:* | ns2:* | ns1:*) { text }*
foreign-nodes = (foreign-attributes | foreign-elements)*
