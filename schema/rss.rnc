# RSS 2.0
# Copyright (c) LdBeth 2022.
# Link to latest version of specification:
# https://www.rssboard.org/rss-specification

namespace atom = "http://www.w3.org/2005/Atom"

start = rss.element
rss.element =
    element rss {
        (attribute version { "2.0" } &
         extension.atts),
        channel.element
    }

extension.atts = attribute * { text }*
channel.element =
    element channel {
        title.element &
        link.element &
        description.element &
        atom.link.element+ &
        generator.element? &
        language.element? &
        copyright.element? &
        managing-editor.element? &
        webmaster.element? &
        pubdate.element? &
        category.element? &
        last-build-date.element? &
        docs.element? &
        cloud.element? &
        ttl.element? &
        image.element? &
        rating.element? &
        text-input.element? &
        skipHours.element? &
        skipDays.element? &
        item.element*
    }

email.string =
    xsd:string { minLength = "6" maxLength = "127" pattern = "[^\s@]+@[^\s@]+\.[^\s@]{2,} \(([^\s]\s)*[^\s]+\)" }
rfc822.date =
    xsd:string { pattern =
  "(((Mon)|(Tue)|(Wed)|(Thu)|(Fri)|(Sat)|(Sun)), )?\d{1,2} ((Jan)|(Feb)|(Mar)|(Apr)|(May)|(Jun)|(Jul)|(Aug)|(Sep)|(Oct)|(Nov)|(Dec)) \d{4} \d{2}:\d{2}(:\d{2})? ((UT)|(GMT)|(EST)|(EDT)|(CST)|(CDT)|(MST)|(MDT)|(PST)|(PDT)|([\+\-]\d{4}))"
}
domain.name = xsd:string { pattern = "(\w\.)+\w" }
path.name = xsd:string { pattern = "/?(\w/?)+" }
method.name = xsd:string { pattern = "([a-zA-Z]+\.)+[a-zA-Z]+" }
mime.type = attribute type { xsd:string { pattern = "\w+/[\+\-\.\w]+" } }
title.element = element title { text }
link.element = element link { xsd:anyURI }
atom.link.element =
    element atom:link {
        attribute href { xsd:anyURI } &
        atom.link.rel? &
        mime.type? &
        attribute hreflang { xsd:language }? &
        attribute title { text }? &
        attribute length { xsd:byte }?
    }
atom.link.rel =
    attribute rel {
        "alternate" | "enclosure" | "related" | "self" | "via" |
        xsd:anyURI
    }
description.element = element description { text }
language.element = element language { xsd:language }
copyright.element = element copyright { text }
managing-editor.element = element managingEditor { email.string }
webmaster.element = element webMaster { email.string }
pubdate.element = element pubDate { rfc822.date }
last-build-date.element = element lastBuildDate { rfc822.date }
category.element =
    element category {
        attribute domain { xsd:anyURI }?,
        xsd:token
    }
generator.element = element generator { text }
docs.element = element docs { xsd:anyURI }
cloud.element =
    element cloud {
        attribute domain { domain.name } &
        attribute port { xsd:unsignedShort } &
        attribute path { path.name } &
        attribute registerProcedure { method.name } &
        attribute protocol { "xml-rpc" | "soap" | "http-post" }
    }
ttl.element = element ttl { xsd:unsignedInt }
image.element =
    element image {
        element url { xsd:anyURI } &
        title.element &
        link.element &
        element width { xsd:unsignedInt { maxInclusive = "144" } }? &
        element height { xsd:unsignedInt { maxInclusive = "400" } }?
    }
rating.element = element rating { text }
text-input.element =
    element textInput {
        title.element &
        description.element &
        element name { text } &
        link.element
        }
skipHours.element =
    element skipHours {
        xsd:integer { maxInclusive = "24" minInclusive = "0" }
    }
skipDays.element =
    element skipDays {
        "Monday" | "Tuesday" | "Wednesday" |
        "Thursday" | "Friday" | "Saturday" | "Sunday"
    }

item.element =
    element item {
        (title.element | description.element)+ &
        link.element? &
        author.element? &
        category.element* &
        comments.element? &
        enclosure.element? &
        guid.element? &
        pubdate.element? &
        source.element?
    }

author.element = element author { email.string }
comments.element = element comments { xsd:anyURI }
enclosure.element =
    element enclosure {
        attribute url { xsd:anyURI } &
        attribute length { xsd:unsignedInt } &
        mime.type
    }
guid.element =
    element guid {
        attribute isPermaLink { "true" | "false" }?,
        text
    }
source.element =
    element source {
        attribute url { xsd:anyURI },
        text
    }
